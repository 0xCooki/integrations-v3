/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CEtherMock, CEtherMockInterface } from "../CEtherMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialExchangeRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_interestRate",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "accrueInterest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateCurrent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "failing",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemTokens",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemAmount",
        type: "uint256",
      },
    ],
    name: "redeemUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setFailing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620016ac380380620016ac8339810160408190526200003491620000b6565b81816040518060400160405280600e81526020016d21b7b6b837bab7321022ba3432b960911b815250604051806040016040528060048152602001630c68aa8960e31b815250818181600390816200008d919062000180565b5060046200009c828262000180565b50505060059390935550608052505042600655506200024c565b60008060408385031215620000ca57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200010657607f821691505b6020821081036200012757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200017b57600081815260208120601f850160051c81016020861015620001565750805b601f850160051c820191505b81811015620001775782815560010162000162565b5050505b505050565b81516001600160401b038111156200019c576200019c620000db565b620001b481620001ad8454620000f1565b846200012d565b602080601f831160018114620001ec5760008415620001d35750858301515b600019600386901b1c1916600185901b17855562000177565b600085815260208120601f198616915b828110156200021d57888601518255948401946001909101908401620001fc565b50858210156200023c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051611444620002686000396000610c8801526114446000f3fe6080604052600436106101445760003560e01c806339509351116100c0578063a6afed9511610074578063bd6d894d11610059578063bd6d894d14610371578063db006a7514610386578063dd62ed3e146103a657600080fd5b8063a6afed951461033c578063a9059cbb1461035157600080fd5b8063852a12e3116100a5578063852a12e3146102e757806395d89b4114610307578063a457c2d71461031c57600080fd5b8063395093511461028457806370a08231146102a457600080fd5b80631249c58b11610117578063182df0f5116100fc578063182df0f51461023357806323b872dd14610248578063313ce5671461026857600080fd5b80631249c58b1461020c57806318160ddd1461021457600080fd5b8063049ddbf81461014957806306fdde0314610197578063095ea7b3146101c25780631118b879146101f2575b600080fd5b34801561015557600080fd5b50610195610164366004611189565b600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b005b3480156101a357600080fd5b506101ac6103f9565b6040516101b991906111b2565b60405180910390f35b3480156101ce57600080fd5b506101e26101dd366004611247565b61048b565b60405190151581526020016101b9565b3480156101fe57600080fd5b506007546101e29060ff1681565b6101956104a5565b34801561022057600080fd5b506002545b6040519081526020016101b9565b34801561023f57600080fd5b50600554610225565b34801561025457600080fd5b506101e2610263366004611271565b610523565b34801561027457600080fd5b50604051600881526020016101b9565b34801561029057600080fd5b506101e261029f366004611247565b610547565b3480156102b057600080fd5b506102256102bf3660046112ad565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b3480156102f357600080fd5b506102256103023660046112c8565b610593565b34801561031357600080fd5b506101ac6105b2565b34801561032857600080fd5b506101e2610337366004611247565b6105c1565b34801561034857600080fd5b50610195610692565b34801561035d57600080fd5b506101e261036c366004611247565b61069c565b34801561037d57600080fd5b506102256106aa565b34801561039257600080fd5b506102256103a13660046112c8565b6106bb565b3480156103b257600080fd5b506102256103c13660046112e1565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461040890611314565b80601f016020809104026020016040519081016040528092919081815260200182805461043490611314565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b5050505050905090565b6000336104998185856106da565b60019150505b92915050565b60075460ff1615610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d696e74206661696c656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6105203461088d565b50565b6000336105318582856108d3565b61053c8585856109aa565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190610499908290869061058e908790611396565b6106da565b60075460009060ff16156105a957506003919050565b61049f82610c19565b60606004805461040890611314565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161050e565b61053c82868684036106da565b61069a610c57565b565b6000336104998185856109aa565b60006106b4610c57565b5060055490565b60075460009060ff16156106d157506002919050565b61049f82610ce9565b73ffffffffffffffffffffffffffffffffffffffff831661077c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff821661081f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610897610c57565b6108a13383610d27565b6108cb33600554670de0b6b3a7640000856108bc91906113a9565b6108c691906113c0565b610d58565b506000919050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109a45781811015610997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161050e565b6109a484848484036106da565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610a4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff8216610af0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610ba6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36109a4565b6000610c23610c57565b610c4d33600554670de0b6b3a764000085610c3e91906113a9565b610c4891906113c0565b610e50565b6108cb3383611014565b600060065442610c6791906113fb565b905080600003610c745750565b670de0b6b3a76400006301e13380610cac837f00000000000000000000000000000000000000000000000000000000000000006113a9565b610cb691906113c0565b610cc890670de0b6b3a7640000611396565b600554610cd591906113a9565b610cdf91906113c0565b6005555042600655565b6000610cf3610c57565b610cfd3383610e50565b6108cb33670de0b6b3a764000060055485610d1891906113a9565b610d2291906113c0565b611014565b3373ffffffffffffffffffffffffffffffffffffffff8316148015610d4b57508034145b610d5457600080fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff8216610dd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161050e565b8060026000828254610de79190611396565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b73ffffffffffffffffffffffffffffffffffffffff8216610ef3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015610fa9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161050e565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b610d5473ffffffffffffffffffffffffffffffffffffffff83168280471015611099576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161050e565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146110f3576040519150601f19603f3d011682016040523d82523d6000602084013e6110f8565b606091505b5050905080610e4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161050e565b60006020828403121561119b57600080fd5b813580151581146111ab57600080fd5b9392505050565b600060208083528351808285015260005b818110156111df578581018301518582016040015282016111c3565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461124257600080fd5b919050565b6000806040838503121561125a57600080fd5b6112638361121e565b946020939093013593505050565b60008060006060848603121561128657600080fd5b61128f8461121e565b925061129d6020850161121e565b9150604084013590509250925092565b6000602082840312156112bf57600080fd5b6111ab8261121e565b6000602082840312156112da57600080fd5b5035919050565b600080604083850312156112f457600080fd5b6112fd8361121e565b915061130b6020840161121e565b90509250929050565b600181811c9082168061132857607f821691505b602082108103611361577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561049f5761049f611367565b808202811582820484141761049f5761049f611367565b6000826113f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561049f5761049f61136756fea2646970667358221220a4fec4b3e398ecbc16505191e30319600f7ec4f8659d9e1cb4297890443c1de864736f6c63430008110033";

type CEtherMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CEtherMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CEtherMock__factory extends ContractFactory {
  constructor(...args: CEtherMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CEtherMock";
  }

  override deploy(
    _initialExchangeRate: PromiseOrValue<BigNumberish>,
    _interestRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CEtherMock> {
    return super.deploy(
      _initialExchangeRate,
      _interestRate,
      overrides || {}
    ) as Promise<CEtherMock>;
  }
  override getDeployTransaction(
    _initialExchangeRate: PromiseOrValue<BigNumberish>,
    _interestRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _initialExchangeRate,
      _interestRate,
      overrides || {}
    );
  }
  override attach(address: string): CEtherMock {
    return super.attach(address) as CEtherMock;
  }
  override connect(signer: Signer): CEtherMock__factory {
    return super.connect(signer) as CEtherMock__factory;
  }
  static readonly contractName: "CEtherMock";

  public readonly contractName: "CEtherMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CEtherMockInterface {
    return new utils.Interface(_abi) as CEtherMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CEtherMock {
    return new Contract(address, _abi, signerOrProvider) as CEtherMock;
  }
}
