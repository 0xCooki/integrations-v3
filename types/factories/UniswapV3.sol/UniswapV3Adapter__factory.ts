/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  UniswapV3Adapter,
  UniswapV3AdapterInterface,
} from "../../UniswapV3.sol/UniswapV3Adapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_creditManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CreditFacadeOnlyException",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPathException",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotAllowedException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract IACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_gearboxAdapterType",
    outputs: [
      {
        internalType: "enum AdapterType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_gearboxAdapterVersion",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "addressProvider",
    outputs: [
      {
        internalType: "contract IAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creditManager",
    outputs: [
      {
        internalType: "contract ICreditManagerV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rateMinRAY",
            type: "uint256",
          },
        ],
        internalType: "struct IUniswapV3Adapter.ExactAllInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactAllInput",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rateMinRAY",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct IUniswapV3Adapter.ExactAllInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactAllInputSingle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInput",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInputSingle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
        ],
        internalType: "struct ISwapRouter.ExactOutputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutput",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactOutputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutputSingle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    name: "isPoolAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "bool",
            name: "allowed",
            type: "bool",
          },
        ],
        internalType: "struct UniswapV3PoolStatus[]",
        name: "pools",
        type: "tuple[]",
      },
    ],
    name: "setPoolBatchAllowanceStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "targetContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101006040523480156200001257600080fd5b506040516200263f3803806200263f8339810160408190526200003591620001f1565b81816001600160a01b03821615806200005557506001600160a01b038116155b156200007457604051635919af9760e11b815260040160405180910390fd5b6001600160a01b0382166080819052604080516316f0115b60e01b815290516316f0115b916004808201926020929091908290030181865afa158015620000bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e5919062000230565b6001600160a01b0316632954018c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000123573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000149919062000230565b6001600160a01b0390811660a081905290821660c05260408051630873769560e01b815290516308737695916004808201926020929091908290030181865afa1580156200019b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c1919062000230565b6001600160a01b031660e052506200025792505050565b6001600160a01b0381168114620001ee57600080fd5b50565b600080604083850312156200020557600080fd5b82516200021281620001d8565b60208401519092506200022581620001d8565b809150509250929050565b6000602082840312156200024357600080fd5b81516200025081620001d8565b9392505050565b60805160a05160c05160e051612370620002cf600039600081816101980152610a950152600081816101bf015281816115d1015261183b0152600060f40152600081816101f9015281816110ff0152818161119501528181611544015281816117f7015281816118e001526119bf01526123706000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063c12c21c01161008c578063db3e219811610066578063db3e219814610243578063df98b9b514610256578063f28c049814610269578063f4f18d901461027c57600080fd5b8063c12c21c0146101f4578063c7fbf4de1461021b578063ce30bbdb1461022e57600080fd5b806378aa73a4116100c857806378aa73a414610178578063a50cf2c814610193578063bd90df70146101ba578063c04b8d59146101e157600080fd5b80632954018c146100ef578063414bf389146101405780634a7c7f9814610155575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015361014e366004611a9c565b61028f565b005b610168610163366004611b05565b6103ea565b6040519015158152602001610137565b610180600381565b60405161ffff9091168152602001610137565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101536101ef366004611b5e565b610444565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b610153610229366004611b93565b61060d565b610236600281565b6040516101379190611ba5565b610153610251366004611a9c565b610912565b610153610264366004611be6565b610a67565b610153610277366004611b5e565b610c94565b61015361028a366004611c5b565b610e1a565b6102976110fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fb576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610305611191565b9050600061031836849003840184611df5565b73ffffffffffffffffffffffffffffffffffffffff8316606082015290506103e46103466020850185611e12565b6103566040860160208701611e12565b836040516024016103679190611e2f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f414bf389000000000000000000000000000000000000000000000000000000001790526000611240565b50505050565b60006103f6848461128d565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291825282812062ffffff9590951681529390529091205460ff169392505050565b61044c6110fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b0576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104ba611191565b9050600080806105076104cd8680611eaa565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112db92505050565b92509250925082610544576040517fbb107e8600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061054f8661200a565b73ffffffffffffffffffffffffffffffffffffffff8616602082015260405190915061060490849084906105879085906024016120e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc04b8d59000000000000000000000000000000000000000000000000000000001790526000611240565b50505050505050565b6106156110fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610679576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610683611191565b905060006106946020840184611e12565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291909116906370a0823190602401602060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072691906120f6565b90506001811161073557505050565b6040805161010081019091527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90910190600090806107776020870187611e12565b73ffffffffffffffffffffffffffffffffffffffff1681526020018560200160208101906107a59190611e12565b73ffffffffffffffffffffffffffffffffffffffff1681526020016107d0606087016040880161210f565b62ffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001856060013581526020018381526020016b033b2e3c9fd0803ce80000008660800135856108239190612159565b61082d9190612170565b815260200161084260c0870160a08801611e12565b73ffffffffffffffffffffffffffffffffffffffff169052905061090a61086c6020860186611e12565b61087c6040870160208801611e12565b8360405160240161088d9190611e2f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f414bf389000000000000000000000000000000000000000000000000000000001790526001611240565b505050505b50565b61091a6110fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461097e576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610988611191565b9050600061099b36849003840184611df5565b73ffffffffffffffffffffffffffffffffffffffff8316606082015290506103e46109c96020850185611e12565b6109d96040860160208701611e12565b836040516024016109ea9190611e2f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fdb3e2198000000000000000000000000000000000000000000000000000000001790526000611240565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1591906121b9565b610b4b576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060005b818110156103e457600080610bb4868685818110610b6f57610b6f6121d6565b610b859260206080909202019081019150611e12565b878786818110610b9757610b976121d6565b9050608002016020016020810190610baf9190611e12565b61128d565b91509150858584818110610bca57610bca6121d6565b9050608002016060016020810190610be29190612205565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208181526040808320938616835292905290812090888887818110610c2757610c276121d6565b9050608002016040016020810190610c3f919061210f565b62ffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905550610c8d905081612222565b9050610b4f565b610c9c6110fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d00576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d0a611191565b905060008080610d1d6104cd8680611eaa565b92509250925082610d5a576040517fbb107e8600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d658661200a565b73ffffffffffffffffffffffffffffffffffffffff861660208201526040519091506106049083908590610d9d9085906024016120e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff28c0498000000000000000000000000000000000000000000000000000000001790526000611240565b610e226110fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e86576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e90611191565b905060008080610ea36104cd8680611eaa565b92509250925082610ee0576040517fbb107e8600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152600091908416906370a0823190602401602060405180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7491906120f6565b905060018111610f8657505050505050565b6040805160a081019091527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091019060009080610fc48980611eaa565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525073ffffffffffffffffffffffffffffffffffffffff8816602080830191909152890135604080830191909152606082018590526080909101906b033b2e3c9fd0803ce80000009061104f908b013586612159565b6110599190612170565b81525090506110f184848360405160240161107491906120e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc04b8d59000000000000000000000000000000000000000000000000000000001790526001611240565b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632f7a18816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c919061225a565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e958b7046111d76110fb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015611168573d6000803e3d6000fd5b606061126c857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611542565b6112788585858561163f565b9050611285856001611542565b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610156112ce5750829050816112d4565b50819050825b9250929050565b80516000908190819060036112f260146002612159565b6112fc9190612277565b810361134a5761130d856000611664565b925061132561131e60036014612277565b8690611664565b915060006113348660146116ff565b90506113418484836103ea565b9450505061153b565b61135660036002612159565b61136260146003612159565b61136c9190612277565b81036114115761137d856000611664565b9250600061139761139060036014612277565b8790611664565b90506113b36113a860036014612277565b611390906002612159565b925060006113c28760146116ff565b905060006113e760146113d6600382612277565b6113e09190612277565b89906116ff565b90506113f48684846103ea565b801561140657506114068386836103ea565b96505050505061153b565b61141c600380612159565b61142860146004612159565b6114329190612277565b810361153957611443856000611664565b9250600061145661139060036014612277565b9050600061147b61146960036014612277565b611474906002612159565b8890611664565b905061149761148c60036014612277565b611474906003612159565b935060006114a68860146116ff565b905060006114cb60146114ba600382612277565b6114c49190612277565b8a906116ff565b905060006114fb60146114df600382612277565b6114ea906002612159565b6114f49190612277565b8b906116ff565b90506115088886856103ea565b801561151a575061151a8585846103ea565b801561152c575061152c8488836103ea565b985050505050505061153b565b505b9193909250565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166346fb371d6115866110fb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff91821660048201527f000000000000000000000000000000000000000000000000000000000000000082166024820152908516604482015260648101849052608401600060405180830381600087803b15801561162357600080fd5b505af1158015611637573d6000803e3d6000fd5b505050505050565b606061164a836117f3565b9050811561165b5761165b856118de565b611285846119bd565b6000611671826014612277565b835110156116e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e6473000000000000000000000060448201526064015b60405180910390fd5b50818101602001516c0100000000000000000000000090045b92915050565b60008161170d816003612277565b1015611775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f7700000000000000000000000000000060448201526064016116d7565b611780826003612277565b835110156117ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e647300000000000000000000000060448201526064016116d7565b50016003015190565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636ce4074a6118396110fb565b7f0000000000000000000000000000000000000000000000000000000000000000856040518463ffffffff1660e01b81526004016118799392919061228a565b6000604051808303816000875af1158015611898573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116f991908101906122cc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630d8f9cee611922611191565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff918216600482015290841660248201526044016020604051808303816000875af1158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b991906121b9565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166351e3f160611a01611191565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff91821660048201529084166024820152604401600060405180830381600087803b158015611a6f57600080fd5b505af115801561090a573d6000803e3d6000fd5b60006101008284031215611a9657600080fd5b50919050565b60006101008284031215611aaf57600080fd5b611ab98383611a83565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461090f57600080fd5b8035611aed81611ac0565b919050565b803562ffffff81168114611aed57600080fd5b600080600060608486031215611b1a57600080fd5b8335611b2581611ac0565b92506020840135611b3581611ac0565b9150611b4360408501611af2565b90509250925092565b600060a08284031215611a9657600080fd5b600060208284031215611b7057600080fd5b813567ffffffffffffffff811115611b8757600080fd5b61128584828501611b4c565b600060c08284031215611a9657600080fd5b6020810160158310611be0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60008060208385031215611bf957600080fd5b823567ffffffffffffffff80821115611c1157600080fd5b818501915085601f830112611c2557600080fd5b813581811115611c3457600080fd5b8660208260071b8501011115611c4957600080fd5b60209290920196919550909350505050565b600060208284031215611c6d57600080fd5b813567ffffffffffffffff811115611c8457600080fd5b820160608185031215611ab957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611ce857611ce8611c96565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611d3557611d35611c96565b604052919050565b6000610100808385031215611d5157600080fd5b6040519081019067ffffffffffffffff82118183101715611d7457611d74611c96565b8160405280925083359150611d8882611ac0565b818152611d9760208501611ae2565b6020820152611da860408501611af2565b6040820152611db960608501611ae2565b60608201526080840135608082015260a084013560a082015260c084013560c0820152611de860e08501611ae2565b60e0820152505092915050565b60006101008284031215611e0857600080fd5b611ab98383611d3d565b600060208284031215611e2457600080fd5b8135611ab981611ac0565b61010081016116f9828473ffffffffffffffffffffffffffffffffffffffff80825116835280602083015116602084015262ffffff60408301511660408401528060608301511660608401526080820151608084015260a082015160a084015260c082015160c08401528060e08301511660e0840152505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611edf57600080fd5b83018035915067ffffffffffffffff821115611efa57600080fd5b6020019150368190038213156112d457600080fd5b600067ffffffffffffffff821115611f2957611f29611c96565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600060a08284031215611f6757600080fd5b611f6f611cc5565b9050813567ffffffffffffffff811115611f8857600080fd5b8201601f81018413611f9957600080fd5b80356020611fae611fa983611f0f565b611cee565b8281528682848601011115611fc257600080fd5b828285018383013760008184018301528452611fdf858201611ae2565b8185015250505060408201356040820152606082013560608201526080820135608082015292915050565b60006116f93683611f55565b60005b83811015612031578181015183820152602001612019565b50506000910152565b60008151808452612052816020860160208601612016565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000815160a0845261209960a085018261203a565b905073ffffffffffffffffffffffffffffffffffffffff60208401511660208501526040830151604085015260608301516060850152608083015160808501528091505092915050565b602081526000611ab96020830184612084565b60006020828403121561210857600080fd5b5051919050565b60006020828403121561212157600080fd5b611ab982611af2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176116f9576116f961212a565b6000826121a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b801515811461090f57600080fd5b6000602082840312156121cb57600080fd5b8151611ab9816121ab565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561221757600080fd5b8135611ab9816121ab565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122535761225361212a565b5060010190565b60006020828403121561226c57600080fd5b8151611ab981611ac0565b808201808211156116f9576116f961212a565b600073ffffffffffffffffffffffffffffffffffffffff8086168352808516602084015250606060408301526122c3606083018461203a565b95945050505050565b6000602082840312156122de57600080fd5b815167ffffffffffffffff8111156122f557600080fd5b8201601f8101841361230657600080fd5b8051612314611fa982611f0f565b81815285602083850101111561232957600080fd5b6122c382602083016020860161201656fea2646970667358221220db8e7297b279b015f7a89becd79603c11828354313086180cef0ecf9448b851b64736f6c63430008110033";

type UniswapV3AdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV3AdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV3Adapter__factory extends ContractFactory {
  constructor(...args: UniswapV3AdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UniswapV3Adapter";
  }

  override deploy(
    _creditManager: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniswapV3Adapter> {
    return super.deploy(
      _creditManager,
      _router,
      overrides || {}
    ) as Promise<UniswapV3Adapter>;
  }
  override getDeployTransaction(
    _creditManager: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_creditManager, _router, overrides || {});
  }
  override attach(address: string): UniswapV3Adapter {
    return super.attach(address) as UniswapV3Adapter;
  }
  override connect(signer: Signer): UniswapV3Adapter__factory {
    return super.connect(signer) as UniswapV3Adapter__factory;
  }
  static readonly contractName: "UniswapV3Adapter";

  public readonly contractName: "UniswapV3Adapter";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV3AdapterInterface {
    return new utils.Interface(_abi) as UniswapV3AdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV3Adapter {
    return new Contract(address, _abi, signerOrProvider) as UniswapV3Adapter;
  }
}
