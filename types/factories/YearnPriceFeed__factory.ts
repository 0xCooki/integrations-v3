/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  YearnPriceFeed,
  YearnPriceFeedInterface,
} from "../YearnPriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_yVault",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotControllerException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotUnPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainPriceStaleException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplementedException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleNotExistsException",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueOutOfRangeException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroPriceException",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "NewController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    name: "NewLimiterParams",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract IACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimalsDivider",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "externalController",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowerBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedType",
    outputs: [
      {
        internalType: "enum PriceFeedType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lowerBound",
        type: "uint256",
      },
    ],
    name: "setLimiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "upperBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yVault",
    outputs: [
      {
        internalType: "contract IYVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101206040526000805460ff60b01b1916600160b01b1790553480156200002557600080fd5b5060405162001d9c38038062001d9c83398101604081905262000048916200056c565b8260c86001600160a01b038416620000705760405180602001604052806000815250620000fb565b836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000d99190810190620005f2565b604051602001620000eb9190620006aa565b6040516020818303038152906040525b6000805460ff19169055826001600160a01b0381166200012e57604051635919af9760e11b815260040160405180910390fd5b806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200016d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001939190620006da565b6001600160a01b03166080816001600160a01b031681525050806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002119190620006da565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200024f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002759190620006da565b600080546001600160a01b039290921661010002610100600160a81b0319909216919091179055506002620002ab82826200078e565b505060a052506001600160a01b0382161580620002cf57506001600160a01b038116155b15620002ee57604051635919af9760e11b815260040160405180910390fd5b6001600160a01b0380831660e081905290821660c0526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa15801562000340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200036691906200085a565b6200037390600a62000992565b61010081815250506000826001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e29190620009a3565b9050620003ef81620003f9565b5050505062000a10565b8015806200041a57506200041881620004128162000486565b620004ba565b155b1562000439576040516309aadd6f60e41b815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de2816200046b8162000486565b6040805192835260208301919091520160405180910390a150565b60a051600090612710906200049c9082620009bd565b620004a89084620009d3565b620004b49190620009ed565b92915050565b60008060e0516001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005249190620009a3565b9050838110806200053457508281115b1562000545576000915050620004b4565b5060019392505050565b80516001600160a01b03811681146200056757600080fd5b919050565b6000806000606084860312156200058257600080fd5b6200058d846200054f565b92506200059d602085016200054f565b9150620005ad604085016200054f565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620005e9578181015183820152602001620005cf565b50506000910152565b6000602082840312156200060557600080fd5b81516001600160401b03808211156200061d57600080fd5b818401915084601f8301126200063257600080fd5b815181811115620006475762000647620005b6565b604051601f8201601f19908116603f01168101908382118183101715620006725762000672620005b6565b816040528281528760208487010111156200068c57600080fd5b6200069f836020830160208801620005cc565b979650505050505050565b60008251620006be818460208701620005cc565b69081c1c9a58d95199595960b21b920191825250600a01919050565b600060208284031215620006ed57600080fd5b620006f8826200054f565b9392505050565b600181811c908216806200071457607f821691505b6020821081036200073557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200078957600081815260208120601f850160051c81016020861015620007645750805b601f850160051c820191505b81811015620007855782815560010162000770565b5050505b505050565b81516001600160401b03811115620007aa57620007aa620005b6565b620007c281620007bb8454620006ff565b846200073b565b602080601f831160018114620007fa5760008415620007e15750858301515b600019600386901b1c1916600185901b17855562000785565b600085815260208120601f198616915b828110156200082b578886015182559484019460019091019084016200080a565b50858210156200084a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200086d57600080fd5b815160ff81168114620006f857600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620008d6578160001904821115620008ba57620008ba6200087f565b80851615620008c857918102915b93841c93908002906200089a565b509250929050565b600082620008ef57506001620004b4565b81620008fe57506000620004b4565b8160018114620009175760028114620009225762000942565b6001915050620004b4565b60ff8411156200093657620009366200087f565b50506001821b620004b4565b5060208310610133831016604e8410600b841016171562000967575081810a620004b4565b62000973838362000895565b80600019048211156200098a576200098a6200087f565b029392505050565b6000620006f860ff841683620008de565b600060208284031215620009b657600080fd5b5051919050565b80820180821115620004b457620004b46200087f565b8082028115828204841417620004b457620004b46200087f565b60008262000a0b57634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e0516101005161130162000a9b6000396000818161035a0152610b8601526000818161020b01528181610aea0152610f6401526000818161029e0152610a410152600081816101810152610ca5015260008181610333015281816103fa01528181610576015281816106620152818161075d015261097501526113016000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80638456cb59116100d8578063a834559e1161008c578063d62ada1111610066578063d62ada1114610397578063f77c47911461039f578063feaf968c146103c457600080fd5b8063a834559e14610355578063b09ad8a01461037c578063bc489a651461038457600080fd5b80639a6fc8f5116100bd5780639a6fc8f5146102db578063a384d6ff14610325578063a50cf2c81461032e57600080fd5b80638456cb59146102c057806392eefe9b146102c857600080fd5b80633fd0875f1161012f5780635c975abb116101145780635c975abb146102795780637284e41614610284578063741bef1a1461029957600080fd5b80633fd0875f1461025c57806354fd4d501461027157600080fd5b8063313ce56711610160578063313ce567146101ec57806333303f8e146102065780633f4ba83a1461025257600080fd5b806312b495a81461017c57806325e22370146101b6575b600080fd5b6101a37f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6000546101dc907501000000000000000000000000000000000000000000900460ff1681565b60405190151581526020016101ad565b6101f4600881565b60405160ff90911681526020016101ad565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ad565b61025a6103cc565b005b610264600181565b6040516101ad9190611019565b6101a3600281565b60005460ff166101dc565b61028c6104ba565b6040516101ad919061105a565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b61025a610548565b61025a6102d63660046110c6565b610634565b6102ee6102e936600461111b565b61087c565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016101ad565b6101a360015481565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6101a37f000000000000000000000000000000000000000000000000000000000000000081565b6101a36108b6565b61025a610392366004611138565b6108c8565b6101dc600181565b60005461022d90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b6102ee610a37565b6040517fd4eb5db00000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d4eb5db090602401602060405180830381865afa158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a9190611151565b6104b0576040517f10332dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104b8610bc3565b565b600280546104c790611173565b80601f01602080910402602001604051908101604052809291908181526020018280546104f390611173565b80156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b505050505081565b6040517f3a41ec640000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633a41ec6490602401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190611151565b61062c576040517fd794b1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104b8610c40565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190611151565b610718576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5f259aba00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f00000000000000000000000000000000000000000000000000000000000000001690635f259aba90602401602060405180830381865afa1580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c89190611151565b600080547fffffffffffffffffffff000000000000000000000000000000000000000000ff1691157501000000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000ff169190911761010073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917fe253457d9ad994ca9682fc3bbc38c890dca73a2d5ecee3809e548bac8b00d7c691a250565b60008060008060006040517f24e46f7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108c3600154610c9b565b905090565b6000547501000000000000000000000000000000000000000000900460ff161561094757600054610100900473ffffffffffffffffffffffffffffffffffffffff163314610942576040517f0129bb9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a2b565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190611151565b610a2b576040517f0129bb9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a3481610ce4565b50565b60008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace91906111c6565b939850919650945092509050610ae685858484610d82565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b77919061121e565b9050610b8281610e1d565b90507f0000000000000000000000000000000000000000000000000000000000000000610baf8683611266565b610bb9919061127d565b9450509091929394565b610bcb610e81565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b610c48610ef2565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c163390565b6000612710610cca7f0000000000000000000000000000000000000000000000000000000000000000826112b8565b610cd49084611266565b610cde919061127d565b92915050565b801580610d005750610cfe81610cf983610c9b565b610f5f565b155b15610d37576040517f9aadd6f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de281610d6781610c9b565b6040805192835260208301919091520160405180910390a150565b60008313610dbc576040517f56e05d2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8369ffffffffffffffffffff168169ffffffffffffffffffff161080610de0575081155b15610e17576040517fb1cf675500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60015460009080831015610e5d576040517f6477ba0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e6882610c9b565b9050808411610e775783610e79565b805b949350505050565b60005460ff166104b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b60005460ff16156104b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ee9565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff1919061121e565b90508381108061100057508281115b1561100f576000915050610cde565b5060019392505050565b60208101600e8310611054577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b818110156110875785810183015185820160400152820161106b565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156110d857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146110fc57600080fd5b9392505050565b69ffffffffffffffffffff81168114610a3457600080fd5b60006020828403121561112d57600080fd5b81356110fc81611103565b60006020828403121561114a57600080fd5b5035919050565b60006020828403121561116357600080fd5b815180151581146110fc57600080fd5b600181811c9082168061118757607f821691505b6020821081036111c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080600080600060a086880312156111de57600080fd5b85516111e981611103565b80955050602086015193506040860151925060608601519150608086015161121081611103565b809150509295509295909350565b60006020828403121561123057600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610cde57610cde611237565b6000826112b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80820180821115610cde57610cde61123756fea264697066735822122099e7052cc136c4218bbf9cb590398e17c24120fd4364793da7390761760f734864736f6c63430008110033";

type YearnPriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YearnPriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YearnPriceFeed__factory extends ContractFactory {
  constructor(...args: YearnPriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "YearnPriceFeed";
  }

  override deploy(
    addressProvider: PromiseOrValue<string>,
    _yVault: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YearnPriceFeed> {
    return super.deploy(
      addressProvider,
      _yVault,
      _priceFeed,
      overrides || {}
    ) as Promise<YearnPriceFeed>;
  }
  override getDeployTransaction(
    addressProvider: PromiseOrValue<string>,
    _yVault: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressProvider,
      _yVault,
      _priceFeed,
      overrides || {}
    );
  }
  override attach(address: string): YearnPriceFeed {
    return super.attach(address) as YearnPriceFeed;
  }
  override connect(signer: Signer): YearnPriceFeed__factory {
    return super.connect(signer) as YearnPriceFeed__factory;
  }
  static readonly contractName: "YearnPriceFeed";

  public readonly contractName: "YearnPriceFeed";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YearnPriceFeedInterface {
    return new utils.Interface(_abi) as YearnPriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YearnPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as YearnPriceFeed;
  }
}
