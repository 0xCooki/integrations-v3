/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  WstETHV1Adapter,
  WstETHV1AdapterInterface,
} from "../../WstETHV1.sol/WstETHV1Adapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_creditManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wstETH",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CreditFacadeOnlyException",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotAllowedException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract IACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_gearboxAdapterType",
    outputs: [
      {
        internalType: "enum AdapterType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_gearboxAdapterVersion",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "addressProvider",
    outputs: [
      {
        internalType: "contract IAddressProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creditManager",
    outputs: [
      {
        internalType: "contract ICreditManagerV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETHTokenMask",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "targetContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unwrap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unwrapAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "wrap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wrapAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wstETHTokenMask",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101606040523480156200001257600080fd5b50604051620015703803806200157083398101604081905262000035916200032d565b81816001600160a01b03821615806200005557506001600160a01b038116155b156200007457604051635919af9760e11b815260040160405180910390fd5b6001600160a01b0382166080819052604080516316f0115b60e01b815290516316f0115b916004808201926020929091908290030181865afa158015620000bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e591906200036c565b6001600160a01b0316632954018c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014991906200036c565b6001600160a01b0390811660a081905290821660c05260408051630873769560e01b815290516308737695916004808201926020929091908290030181865afa1580156200019b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c191906200036c565b6001600160a01b031660e0816001600160a01b0316815250505050806001600160a01b031663c1fe3e486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200021b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024191906200036c565b6001600160a01b031661010052620002598162000279565b61014052610100516200026c9062000279565b6101205250620003ad9050565b608051604051630f67c5bd60e41b81526001600160a01b038381166004830152600092169063f67c5bd090602401602060405180830381865afa158015620002c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002eb919062000393565b9050806000036200030f5760405163700ca0af60e01b815260040160405180910390fd5b919050565b6001600160a01b03811681146200032a57600080fd5b50565b600080604083850312156200034157600080fd5b82516200034e8162000314565b6020840151909250620003618162000314565b809150509250929050565b6000602082840312156200037f57600080fd5b81516200038c8162000314565b9392505050565b600060208284031215620003a657600080fd5b5051919050565b60805160a05160c05160e0516101005161012051610140516110f26200047e6000396000818160e901528181610823015261095301526000818161019c015281816107f60152610980015260008181610238015281816104a20152818161084c0152610928015260006101c30152600081816101ea01528181610356015281816109ec0152610da1015260006101230152600081816102110152818161061e015281816106b4015281816109a801528181610ae701528181610bbe01528181610c6c0152610d1401526110f26000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063a50cf2c81161008c578063c1fe3e4811610066578063c1fe3e4814610233578063ce30bbdb1461025a578063de0e9a3e1461026f578063ea598cb01461028257600080fd5b8063a50cf2c8146101be578063bd90df70146101e5578063c12c21c01461020c57600080fd5b80634c84c1c8116100bd5780634c84c1c81461017457806378aa73a41461017c5780637c7e8e901461019757600080fd5b8063237122ac146100e45780632954018c1461011e5780634982e3b71461016a575b600080fd5b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101457f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610115565b610172610295565b005b6101726103e1565b610184600281565b60405161ffff9091168152602001610115565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b6101457f000000000000000000000000000000000000000000000000000000000000000081565b6101457f000000000000000000000000000000000000000000000000000000000000000081565b6101457f000000000000000000000000000000000000000000000000000000000000000081565b6101457f000000000000000000000000000000000000000000000000000000000000000081565b610262600f81565b6040516101159190610e07565b61017261027d366004610e48565b610529565b610172610290366004610e48565b6105a3565b61029d61061a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610301576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061030b6106b0565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610e61565b9050600181116103cf575050565b6103dd60018203600161075f565b5050565b6103e961061a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044d576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104576106b0565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d9190610e61565b90506001811161051b575050565b6103dd600182036001610847565b61053161061a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610595576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105a081600061075f565b50565b6105ab61061a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060f576040517fd8026b2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105a0816000610847565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632f7a18816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab9190610ea3565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e958b7046106f661061a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015610687573d6000803e3d6000fd5b6107f08260405160240161077591815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fde0e9a3e000000000000000000000000000000000000000000000000000000001790526109a4565b506103dd7f000000000000000000000000000000000000000000000000000000000000000082610821576000610a95565b7f0000000000000000000000000000000000000000000000000000000000000000610a95565b6108917f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610d12565b610922826040516024016108a791815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fea598cb0000000000000000000000000000000000000000000000000000000001790526109a4565b5061094e7f00000000000000000000000000000000000000000000000000000000000000006001610d12565b6103dd7f00000000000000000000000000000000000000000000000000000000000000008261097e576000610a95565b7f0000000000000000000000000000000000000000000000000000000000000000610a95565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636ce4074a6109ea61061a565b7f0000000000000000000000000000000000000000000000000000000000000000856040518463ffffffff1660e01b8152600401610a2a93929190610ee9565b6000604051808303816000875af1158015610a49573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a8f9190810190610f91565b92915050565b6000610a9f6106b0565b9050828218600060015b828111610d0a5782811615610cdb576040517fe75538c7000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e75538c7906024016040805180830381865afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b66919061105c565b50915085811615610c1f576040517f51e3f16000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015283811660248301527f000000000000000000000000000000000000000000000000000000000000000016906351e3f16090604401600060405180830381600087803b158015610c0257600080fd5b505af1158015610c16573d6000803e3d6000fd5b50505050610cdb565b6040517f0d8f9cee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015283811660248301527f00000000000000000000000000000000000000000000000000000000000000001690630d8f9cee906044016020604051808303816000875af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd9919061109a565b505b7f80000000000000000000000000000000000000000000000000000000000000008114610d0a5760011b610aa9565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166346fb371d610d5661061a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff91821660048201527f000000000000000000000000000000000000000000000000000000000000000082166024820152908516604482015260648101849052608401600060405180830381600087803b158015610df357600080fd5b505af1158015610d0a573d6000803e3d6000fd5b6020810160158310610e42577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208284031215610e5a57600080fd5b5035919050565b600060208284031215610e7357600080fd5b5051919050565b805173ffffffffffffffffffffffffffffffffffffffff81168114610e9e57600080fd5b919050565b600060208284031215610eb557600080fd5b610ebe82610e7a565b9392505050565b60005b83811015610ee0578181015183820152602001610ec8565b50506000910152565b600073ffffffffffffffffffffffffffffffffffffffff8086168352808516602084015250606060408301528251806060840152610f2e816080850160208701610ec5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01691909101608001949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610fa357600080fd5b815167ffffffffffffffff80821115610fbb57600080fd5b818401915084601f830112610fcf57600080fd5b815181811115610fe157610fe1610f62565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561102757611027610f62565b8160405282815287602084870101111561104057600080fd5b611051836020830160208801610ec5565b979650505050505050565b6000806040838503121561106f57600080fd5b61107883610e7a565b9150602083015161ffff8116811461108f57600080fd5b809150509250929050565b6000602082840312156110ac57600080fd5b81518015158114610ebe57600080fdfea2646970667358221220d082c704c0aca7f30315ddae4055426cff7e9b58f6846bb9ef375b4bd8471fa264736f6c63430008110033";

type WstETHV1AdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WstETHV1AdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WstETHV1Adapter__factory extends ContractFactory {
  constructor(...args: WstETHV1AdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "WstETHV1Adapter";
  }

  override deploy(
    _creditManager: PromiseOrValue<string>,
    _wstETH: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WstETHV1Adapter> {
    return super.deploy(
      _creditManager,
      _wstETH,
      overrides || {}
    ) as Promise<WstETHV1Adapter>;
  }
  override getDeployTransaction(
    _creditManager: PromiseOrValue<string>,
    _wstETH: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_creditManager, _wstETH, overrides || {});
  }
  override attach(address: string): WstETHV1Adapter {
    return super.attach(address) as WstETHV1Adapter;
  }
  override connect(signer: Signer): WstETHV1Adapter__factory {
    return super.connect(signer) as WstETHV1Adapter__factory;
  }
  static readonly contractName: "WstETHV1Adapter";

  public readonly contractName: "WstETHV1Adapter";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WstETHV1AdapterInterface {
    return new utils.Interface(_abi) as WstETHV1AdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WstETHV1Adapter {
    return new Contract(address, _abi, signerOrProvider) as WstETHV1Adapter;
  }
}
