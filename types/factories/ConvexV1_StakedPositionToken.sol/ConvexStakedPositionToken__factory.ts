/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ConvexStakedPositionToken,
  ConvexStakedPositionTokenInterface,
} from "../../ConvexV1_StakedPositionToken.sol/ConvexStakedPositionToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lptoken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162000b6438038062000b6483398101604081905262000034916200020d565b80816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200009e919081019062000281565b604051602001620000b0919062000339565b604051602081830303815290604052826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000128919081019062000281565b6040516020016200013a919062000380565b604051602081830303815290604052836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000188573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ae9190620003ad565b6000620001bc838262000468565b506001620001cb848262000468565b5060ff1660a05250506001600160a01b039081166080529190911660c0525062000534565b80516001600160a01b03811681146200020857600080fd5b919050565b600080604083850312156200022157600080fd5b6200022c83620001f0565b91506200023c60208401620001f0565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002785781810151838201526020016200025e565b50506000910152565b6000602082840312156200029457600080fd5b81516001600160401b0380821115620002ac57600080fd5b818401915084601f830112620002c157600080fd5b815181811115620002d657620002d662000245565b604051601f8201601f19908116603f0116810190838211818310171562000301576200030162000245565b816040528281528760208487010111156200031b57600080fd5b6200032e8360208301602088016200025b565b979650505050505050565b7f436f6e766578205374616b656420506f736974696f6e20000000000000000000815260008251620003738160178501602087016200025b565b9190910160170192915050565b6273746b60e81b815260008251620003a08160038501602087016200025b565b9190910160030192915050565b600060208284031215620003c057600080fd5b815160ff81168114620003d257600080fd5b9392505050565b600181811c90821680620003ee57607f821691505b6020821081036200040f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200046357600081815260208120601f850160051c810160208610156200043e5750805b601f850160051c820191505b818110156200045f578281556001016200044a565b5050505b505050565b81516001600160401b0381111562000484576200048462000245565b6200049c81620004958454620003d9565b8462000415565b602080601f831160018114620004d45760008415620004bb5750858301515b600019600386901b1c1916600185901b1785556200045f565b600085815260208120601f198616915b828110156200050557888601518255948401946001909101908401620004e4565b5085821015620005245787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c0516105f262000572600039600081816101170152610380015260006101900152600081816101c901526102a601526105f26000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063313ce5671161008157806395d89b411161005b57806395d89b41146101fe578063a9059cbb146100ec578063dd62ed3e1461020657600080fd5b8063313ce5671461018b5780636f307dc3146101c457806370a08231146101eb57600080fd5b806316f0115b116100b257806316f0115b1461011257806318160ddd1461015e57806323b872dd1461017457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610214565b6040516100e39190610400565b60405180910390f35b6101026100fa366004610495565b600092915050565b60405190151581526020016100e3565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e3565b6101666102a2565b6040519081526020016100e3565b6101026101823660046104bf565b60009392505050565b6101b27f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100e3565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6101666101f93660046104fb565b610338565b6100d66103f3565b6101666100fa36600461051d565b6001805461022190610550565b80601f016020809104026020016040519081016040528092919081815260200182805461024d90610550565b801561029a5780601f1061026f5761010080835404028352916020019161029a565b820191906000526020600020905b81548152906001019060200180831161027d57829003601f168201915b505050505081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561030f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033391906105a3565b905090565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed91906105a3565b92915050565b6000805461022190610550565b600060208083528351808285015260005b8181101561042d57858101830151858201604001528201610411565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461049057600080fd5b919050565b600080604083850312156104a857600080fd5b6104b18361046c565b946020939093013593505050565b6000806000606084860312156104d457600080fd5b6104dd8461046c565b92506104eb6020850161046c565b9150604084013590509250925092565b60006020828403121561050d57600080fd5b6105168261046c565b9392505050565b6000806040838503121561053057600080fd5b6105398361046c565b91506105476020840161046c565b90509250929050565b600181811c9082168061056457607f821691505b60208210810361059d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156105b557600080fd5b505191905056fea2646970667358221220ce4a66af56b36a03384a78e964df153058f7f32d055fdcd30eee09d25f83816664736f6c63430008110033";

type ConvexStakedPositionTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexStakedPositionTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexStakedPositionToken__factory extends ContractFactory {
  constructor(...args: ConvexStakedPositionTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ConvexStakedPositionToken";
  }

  override deploy(
    _pool: PromiseOrValue<string>,
    _lptoken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConvexStakedPositionToken> {
    return super.deploy(
      _pool,
      _lptoken,
      overrides || {}
    ) as Promise<ConvexStakedPositionToken>;
  }
  override getDeployTransaction(
    _pool: PromiseOrValue<string>,
    _lptoken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_pool, _lptoken, overrides || {});
  }
  override attach(address: string): ConvexStakedPositionToken {
    return super.attach(address) as ConvexStakedPositionToken;
  }
  override connect(signer: Signer): ConvexStakedPositionToken__factory {
    return super.connect(signer) as ConvexStakedPositionToken__factory;
  }
  static readonly contractName: "ConvexStakedPositionToken";

  public readonly contractName: "ConvexStakedPositionToken";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexStakedPositionTokenInterface {
    return new utils.Interface(_abi) as ConvexStakedPositionTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexStakedPositionToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConvexStakedPositionToken;
  }
}
