/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  BPTStablePriceFeed,
  BPTStablePriceFeedInterface,
} from "../BPTStablePriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_balancerPool",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_numAssets",
        type: "uint8",
      },
      {
        internalType: "address[]",
        name: "priceFeeds",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotControllerException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotUnPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainPriceStaleException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectPriceFeedException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplementedException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleNotExistsException",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueOutOfRangeException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroPriceException",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "NewController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    name: "NewLimiterParams",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract IACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "balancerPool",
    outputs: [
      {
        internalType: "contract IBalancerStablePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "externalController",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowerBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numAssets",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed0",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed1",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed2",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed3",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed4",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedType",
    outputs: [
      {
        internalType: "enum PriceFeedType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lowerBound",
        type: "uint256",
      },
    ],
    name: "setLimiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "upperBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101a06040526000805460ff60b01b1916600160b01b1790553480156200002557600080fd5b50604051620023b5380380620023b58339810160408190526200004891620006d7565b8360c86001600160a01b038516620000705760405180602001604052806000815250620000fb565b846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000d99190810190620007f6565b604051602001620000eb919062000894565b6040516020818303038152906040525b6000805460ff19169055826001600160a01b0381166200012e57604051635919af9760e11b815260040160405180910390fd5b806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200016d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001939190620008c4565b6001600160a01b03166080816001600160a01b031681525050806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002119190620008c4565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200024f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002759190620008c4565b600080546001600160a01b039290921661010002610100600160a81b0319909216919091179055506002620002ab828262000978565b505060a052506001600160a01b038316620002d957604051635919af9760e11b815260040160405180910390fd5b805160ff83168114620002ff576040516367a7cd4360e01b815260040160405180910390fd5b60005b81811015620003645760006001600160a01b03168382815181106200032b576200032b62000a44565b60200260200101516001600160a01b0316036200035b57604051635919af9760e11b815260040160405180910390fd5b60010162000302565b5060ff8316610180528151829060009062000383576200038362000a44565b60200260200101516001600160a01b031660e0816001600160a01b03168152505081600181518110620003ba57620003ba62000a44565b60209081029190910101516001600160a01b031661010052600360ff84161015620003e757600062000406565b81600281518110620003fd57620003fd62000a44565b60200260200101515b6001600160a01b031661012052600460ff841610156200042857600062000447565b816003815181106200043e576200043e62000a44565b60200260200101515b6001600160a01b031661014052600560ff8416146200046857600062000487565b816004815181106200047e576200047e62000a44565b60200260200101515b6001600160a01b0390811661016052841660c0819052604080516333cd77e760e11b815290516000929163679aefce9160048083019260209291908290030181865afa158015620004dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000502919062000a5a565b90506200050f816200051b565b50505050505062000add565b8015806200053c57506200053a816200053481620005a8565b620005dc565b155b156200055b576040516309aadd6f60e41b815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de2816200058d81620005a8565b6040805192835260208301919091520160405180910390a150565b60a05160009061271090620005be908262000a8a565b620005ca908462000aa0565b620005d6919062000aba565b92915050565b60008060c0516001600160a01b031663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000646919062000a5a565b9050838110806200065657508281115b1562000667576000915050620005d6565b5060019392505050565b80516001600160a01b03811681146200068957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620006cf57620006cf6200068e565b604052919050565b60008060008060808587031215620006ee57600080fd5b620006f98562000671565b935060206200070a81870162000671565b9350604086015160ff811681146200072157600080fd5b60608701519093506001600160401b03808211156200073f57600080fd5b818801915088601f8301126200075457600080fd5b8151818111156200076957620007696200068e565b8060051b91506200077c848301620006a4565b818152918301840191848101908b8411156200079757600080fd5b938501935b83851015620007c057620007b08562000671565b825293850193908501906200079c565b989b979a50959850505050505050565b60005b83811015620007ed578181015183820152602001620007d3565b50506000910152565b6000602082840312156200080957600080fd5b81516001600160401b03808211156200082157600080fd5b818401915084601f8301126200083657600080fd5b8151818111156200084b576200084b6200068e565b62000860601f8201601f1916602001620006a4565b91508082528560208285010111156200087857600080fd5b6200088b816020840160208601620007d0565b50949350505050565b60008251620008a8818460208701620007d0565b69081c1c9a58d95199595960b21b920191825250600a01919050565b600060208284031215620008d757600080fd5b620008e28262000671565b9392505050565b600181811c90821680620008fe57607f821691505b6020821081036200091f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200097357600081815260208120601f850160051c810160208610156200094e5750805b601f850160051c820191505b818110156200096f578281556001016200095a565b5050505b505050565b81516001600160401b038111156200099457620009946200068e565b620009ac81620009a58454620008e9565b8462000925565b602080601f831160018114620009e45760008415620009cb5750858301515b600019600386901b1c1916600185901b1785556200096f565b600085815260208120601f198616915b8281101562000a1557888601518255948401946001909101908401620009f4565b508582101562000a345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000a6d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620005d657620005d662000a74565b8082028115828204841417620005d657620005d662000a74565b60008262000ad857634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e05161010051610120516101405161016051610180516117f762000bbe600039600081816103ad01528181610c7901528181610d630152610e4b0152600081816103180152610e760152600081816102a20152610d8c0152600081816104450152610ca20152600081816103fb0152610bb80152600081816102370152610b090152600081816102f101528181610f37015261139e0152600081816101ad01526110df0152600081816103d4015281816104c20152818161063e0152818161072a015281816108250152610a3d01526117f76000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638456cb59116100ee578063ab0ca0e111610097578063d62ada1111610071578063d62ada1114610438578063e5693f4114610440578063f77c479114610467578063feaf968c1461048c57600080fd5b8063ab0ca0e1146103f6578063b09ad8a01461041d578063bc489a651461042557600080fd5b8063a384d6ff116100c8578063a384d6ff1461039f578063a46fe83b146103a8578063a50cf2c8146103cf57600080fd5b80638456cb591461033a57806392eefe9b146103425780639a6fc8f51461035557600080fd5b8063427cb6fe116101505780637284e4161161012a5780637284e416146102d7578063776da470146102ec5780637aac1c481461031357600080fd5b8063427cb6fe1461029d57806354fd4d50146102c45780635c975abb146102cc57600080fd5b8063385aee1b11610181578063385aee1b146102325780633f4ba83a1461027e5780633fd0875f1461028857600080fd5b806312b495a8146101a857806325e22370146101e2578063313ce56714610218575b600080fd5b6101cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b600054610208907501000000000000000000000000000000000000000000900460ff1681565b60405190151581526020016101d9565b610220600881565b60405160ff90911681526020016101d9565b6102597f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d9565b610286610494565b005b610290600b81565b6040516101d99190611453565b6102597f000000000000000000000000000000000000000000000000000000000000000081565b6101cf600181565b60005460ff16610208565b6102df610582565b6040516101d99190611494565b6102597f000000000000000000000000000000000000000000000000000000000000000081565b6102597f000000000000000000000000000000000000000000000000000000000000000081565b610286610610565b610286610350366004611500565b6106fc565b610368610363366004611555565b610944565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016101d9565b6101cf60015481565b6102207f000000000000000000000000000000000000000000000000000000000000000081565b6102597f000000000000000000000000000000000000000000000000000000000000000081565b6102597f000000000000000000000000000000000000000000000000000000000000000081565b6101cf61097e565b610286610433366004611572565b610990565b610208600181565b6102597f000000000000000000000000000000000000000000000000000000000000000081565b60005461025990610100900473ffffffffffffffffffffffffffffffffffffffff1681565b610368610aff565b6040517fd4eb5db00000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d4eb5db090602401602060405180830381865afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610542919061158b565b610578576040517f10332dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610580610ffd565b565b6002805461058f906115ad565b80601f01602080910402602001604051908101604052809291908181526020018280546105bb906115ad565b80156106085780601f106105dd57610100808354040283529160200191610608565b820191906000526020600020905b8154815290600101906020018083116105eb57829003601f168201915b505050505081565b6040517f3a41ec640000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633a41ec6490602401602060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be919061158b565b6106f4576040517fd794b1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61058061107a565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa919061158b565b6107e0576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5f259aba00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f00000000000000000000000000000000000000000000000000000000000000001690635f259aba90602401602060405180830381865afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610890919061158b565b600080547fffffffffffffffffffff000000000000000000000000000000000000000000ff1691157501000000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000ff169190911761010073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917fe253457d9ad994ca9682fc3bbc38c890dca73a2d5ecee3809e548bac8b00d7c691a250565b60008060008060006040517f24e46f7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061098b6001546110d5565b905090565b6000547501000000000000000000000000000000000000000000900460ff1615610a0f57600054610100900473ffffffffffffffffffffffffffffffffffffffff163314610a0a576040517f0129bb9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610af3565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd919061158b565b610af3576040517f0129bb9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610afc8161111e565b50565b60008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190611600565b939850919650945092509050610bae858584846111bc565b60008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190611600565b939850919650945092509050610c5d858584846111bc565b88841215610c75578499508398508297508196508095505b60037f000000000000000000000000000000000000000000000000000000000000000060ff1610610d5f577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2f9190611600565b939850919650945092509050610d47858584846111bc565b88841215610d5f578499508398508297508196508095505b60047f000000000000000000000000000000000000000000000000000000000000000060ff1610610e49577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e199190611600565b939850919650945092509050610e31858584846111bc565b88841215610e49578499508398508297508196508095505b7f000000000000000000000000000000000000000000000000000000000000000060ff16600503610f33577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f039190611600565b939850919650945092509050610f1b858584846111bc565b88841215610f33578499508398508297508196508095505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc49190611658565b9050610fcf81611257565b9050670de0b6b3a7640000610fe4828c6116a0565b610fee919061171b565b99505050505050509091929394565b6110056112bb565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b61108261132c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110503390565b60006127106111047f000000000000000000000000000000000000000000000000000000000000000082611783565b61110e9084611796565b61111891906117ad565b92915050565b80158061113a575061113881611133836110d5565b611399565b155b15611171576040517f9aadd6f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de2816111a1816110d5565b6040805192835260208301919091520160405180910390a150565b600083136111f6576040517f56e05d2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8369ffffffffffffffffffff168169ffffffffffffffffffff16108061121a575081155b15611251576040517fb1cf675500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60015460009080831015611297576040517f6477ba0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006112a2826110d5565b90508084116112b157836112b3565b805b949350505050565b60005460ff16610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b60005460ff1615610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611323565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142b9190611658565b90508381108061143a57508281115b15611449576000915050611118565b5060019392505050565b60208101600e831061148e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b818110156114c1578581018301518582016040015282016114a5565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561151257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461153657600080fd5b9392505050565b69ffffffffffffffffffff81168114610afc57600080fd5b60006020828403121561156757600080fd5b81356115368161153d565b60006020828403121561158457600080fd5b5035919050565b60006020828403121561159d57600080fd5b8151801515811461153657600080fd5b600181811c908216806115c157607f821691505b6020821081036115fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080600080600060a0868803121561161857600080fd5b85516116238161153d565b80955050602086015193506040860151925060608601519150608086015161164a8161153d565b809150509295509295909350565b60006020828403121561166a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202600082127f8000000000000000000000000000000000000000000000000000000000000000841416156116d8576116d8611671565b818105831482151761111857611118611671565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261172a5761172a6116ec565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561177e5761177e611671565b500590565b8082018082111561111857611118611671565b808202811582820484141761111857611118611671565b6000826117bc576117bc6116ec565b50049056fea264697066735822122050397f6126c0eb320cc8b2a1b0abea227700e48f1afa9caa66daa038fc7a081a64736f6c63430008110033";

type BPTStablePriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BPTStablePriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BPTStablePriceFeed__factory extends ContractFactory {
  constructor(...args: BPTStablePriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BPTStablePriceFeed";
  }

  override deploy(
    addressProvider: PromiseOrValue<string>,
    _balancerPool: PromiseOrValue<string>,
    _numAssets: PromiseOrValue<BigNumberish>,
    priceFeeds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BPTStablePriceFeed> {
    return super.deploy(
      addressProvider,
      _balancerPool,
      _numAssets,
      priceFeeds,
      overrides || {}
    ) as Promise<BPTStablePriceFeed>;
  }
  override getDeployTransaction(
    addressProvider: PromiseOrValue<string>,
    _balancerPool: PromiseOrValue<string>,
    _numAssets: PromiseOrValue<BigNumberish>,
    priceFeeds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressProvider,
      _balancerPool,
      _numAssets,
      priceFeeds,
      overrides || {}
    );
  }
  override attach(address: string): BPTStablePriceFeed {
    return super.attach(address) as BPTStablePriceFeed;
  }
  override connect(signer: Signer): BPTStablePriceFeed__factory {
    return super.connect(signer) as BPTStablePriceFeed__factory;
  }
  static readonly contractName: "BPTStablePriceFeed";

  public readonly contractName: "BPTStablePriceFeed";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BPTStablePriceFeedInterface {
    return new utils.Interface(_abi) as BPTStablePriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BPTStablePriceFeed {
    return new Contract(address, _abi, signerOrProvider) as BPTStablePriceFeed;
  }
}
