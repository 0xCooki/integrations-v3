/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CurveLP4PriceFeed,
  CurveLP4PriceFeedInterface,
} from "../CurveLP4PriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_curvePool",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed3",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed4",
        type: "address",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotConfiguratorException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotControllerException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotUnPausableAdminException",
    type: "error",
  },
  {
    inputs: [],
    name: "ChainPriceStaleException",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectLimitsException",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplementedException",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceOracleNotExistsException",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueOutOfRangeException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressException",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroPriceException",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "NewController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "upperBound",
        type: "uint256",
      },
    ],
    name: "NewLimiterParams",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "_acl",
    outputs: [
      {
        internalType: "contract IACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "curvePool",
    outputs: [
      {
        internalType: "contract ICurvePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimalsDivider",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "externalController",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowerBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed1",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed2",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed3",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed4",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedType",
    outputs: [
      {
        internalType: "enum PriceFeedType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_lowerBound",
        type: "uint256",
      },
    ],
    name: "setLimiter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "upperBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101806040526000805460ff60b01b1916600160b01b1790553480156200002557600080fd5b5060405162001f7a38038062001f7a8339810160408190526200004891620004d5565b6000805460ff191690558686828260c882826001600160a01b0381166200008257604051635919af9760e11b815260040160405180910390fd5b806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e791906200061a565b6001600160a01b03166080816001600160a01b031681525050806001600160a01b031663087376956040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200013f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016591906200061a565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c991906200061a565b600080546001600160a01b039290921661010002610100600160a81b0319909216919091179055506002620001ff8282620006ce565b505060a052506001600160a01b0382166200022d57604051635919af9760e11b815260040160405180910390fd5b6001600160a01b03821660c0819052670de0b6b3a764000060e05260408051630176f71760e71b815290516000929163bb7b8b809160048083019260209291908290030181865afa15801562000287573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ad91906200079a565b9050620002ba816200034c565b505050506001600160a01b0385161580620002dc57506001600160a01b038416155b80620002ef57506001600160a01b038316155b806200030257506001600160a01b038216155b156200032157604051635919af9760e11b815260040160405180910390fd5b506001600160a01b0393841661010052918316610120528216610140521661016052506200081d9050565b8015806200036d57506200036b816200036581620003d9565b6200040d565b155b156200038c576040516309aadd6f60e41b815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de281620003be81620003d9565b6040805192835260208301919091520160405180910390a150565b60a05160009061271090620003ef9082620007ca565b620003fb9084620007e0565b620004079190620007fa565b92915050565b60008060c0516001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200047791906200079a565b9050838110806200048757508281115b156200049857600091505062000407565b5060019392505050565b80516001600160a01b0381168114620004ba57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215620004f157600080fd5b620004fc88620004a2565b965060206200050d818a01620004a2565b96506200051d60408a01620004a2565b95506200052d60608a01620004a2565b94506200053d60808a01620004a2565b93506200054d60a08a01620004a2565b60c08a01519093506001600160401b03808211156200056b57600080fd5b818b0191508b601f8301126200058057600080fd5b815181811115620005955762000595620004bf565b604051601f8201601f19908116603f01168101908382118183101715620005c057620005c0620004bf565b816040528281528e86848701011115620005d957600080fd5b600093505b82841015620005fd5784840186015181850187015292850192620005de565b600086848301015280965050505050505092959891949750929550565b6000602082840312156200062d57600080fd5b6200063882620004a2565b9392505050565b600181811c908216806200065457607f821691505b6020821081036200067557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006c957600081815260208120601f850160051c81016020861015620006a45750805b601f850160051c820191505b81811015620006c557828155600101620006b0565b5050505b505050565b81516001600160401b03811115620006ea57620006ea620004bf565b6200070281620006fb84546200063f565b846200067b565b602080601f8311600181146200073a5760008415620007215750858301515b600019600386901b1c1916600185901b178555620006c5565b600085815260208120601f198616915b828110156200076b578886015182559484019460019091019084016200074a565b50858210156200078a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620007ad57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620004075762000407620007b4565b8082028115828204841417620004075762000407620007b4565b6000826200081857634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e0516101005161012051610140516101605161169c620008de600039600081816102e60152610d030152600081816102970152610c440152600081816104130152610b850152600081816103c90152610ade0152600081816103a20152610e600152600081816101dc01528181610dc401526112430152600081816101a20152610f8401526000818161037b015281816104900152818161060c015281816106f8015281816107f30152610a0b015261169c6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806392eefe9b116100e3578063b09ad8a01161008c578063e5693f4111610066578063e5693f411461040e578063f77c479114610435578063feaf968c1461045a57600080fd5b8063b09ad8a0146103eb578063bc489a65146103f3578063d62ada111461040657600080fd5b8063a50cf2c8116100bd578063a50cf2c814610376578063a834559e1461039d578063ab0ca0e1146103c457600080fd5b806392eefe9b146103105780639a6fc8f514610323578063a384d6ff1461036d57600080fd5b8063427cb6fe116101455780637284e4161161011f5780637284e416146102cc5780637aac1c48146102e15780638456cb591461030857600080fd5b8063427cb6fe1461029257806354fd4d50146102b95780635c975abb146102c157600080fd5b8063313ce56711610176578063313ce567146102595780633f4ba83a146102735780633fd0875f1461027d57600080fd5b806312b495a81461019d578063218751b2146101d757806325e2237014610223575b600080fd5b6101c47f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ce565b600054610249907501000000000000000000000000000000000000000000900460ff1681565b60405190151581526020016101ce565b610261600881565b60405160ff90911681526020016101ce565b61027b610462565b005b610285600481565b6040516101ce91906112f8565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6101c4600181565b60005460ff16610249565b6102d4610550565b6040516101ce9190611339565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b61027b6105de565b61027b61031e3660046113a5565b6106ca565b6103366103313660046113fa565b610912565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016101ce565b6101c460015481565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6101c47f000000000000000000000000000000000000000000000000000000000000000081565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6101c461094c565b61027b610401366004611417565b61095e565b610249600181565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6000546101fe90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b610336610acd565b6040517fd4eb5db00000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d4eb5db090602401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105109190611430565b610546576040517f10332dee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61054e610ea2565b565b6002805461055d90611452565b80601f016020809104026020016040519081016040528092919081815260200182805461058990611452565b80156105d65780601f106105ab576101008083540402835291602001916105d6565b820191906000526020600020905b8154815290600101906020018083116105b957829003601f168201915b505050505081565b6040517f3a41ec640000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633a41ec6490602401602060405180830381865afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c9190611430565b6106c2576040517fd794b1e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61054e610f1f565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190611430565b6107ae576040517f61081c1500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5f259aba00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f00000000000000000000000000000000000000000000000000000000000000001690635f259aba90602401602060405180830381865afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190611430565b600080547fffffffffffffffffffff000000000000000000000000000000000000000000ff1691157501000000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000ff169190911761010073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917fe253457d9ad994ca9682fc3bbc38c890dca73a2d5ecee3809e548bac8b00d7c691a250565b60008060008060006040517f24e46f7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610959600154610f7a565b905090565b6000547501000000000000000000000000000000000000000000900460ff16156109dd57600054610100900473ffffffffffffffffffffffffffffffffffffffff1633146109d8576040517f0129bb9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ac1565b6040517f5f259aba0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635f259aba90602401602060405180830381865afa158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b9190611430565b610ac1576040517f0129bb9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aca81610fc3565b50565b6000806000806000806000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b91906114a5565b939d50919b50995097509550610b838a8a8989611061565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1291906114a5565b939850919650945092509050610c2a85858484611061565b88841215610c42578499508398508297508196508095505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd191906114a5565b939850919650945092509050610ce985858484611061565b88841215610d01578499508398508297508196508095505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9091906114a5565b939850919650945092509050610da885858484611061565b88841215610dc0578499508398508297508196508095505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5191906114fd565b9050610e5c816110fc565b90507f0000000000000000000000000000000000000000000000000000000000000000610e89828c611545565b610e9391906115c0565b99505050505050509091929394565b610eaa611160565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b610f276111d1565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ef53390565b6000612710610fa97f000000000000000000000000000000000000000000000000000000000000000082611628565b610fb3908461163b565b610fbd9190611652565b92915050565b801580610fdf5750610fdd81610fd883610f7a565b61123e565b155b15611016576040517f9aadd6f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018190557f82e7ee47180a631312683eeb2a85ad264c9af490d54de5a75bbdb95b968c6de28161104681610f7a565b6040805192835260208301919091520160405180910390a150565b6000831361109b576040517f56e05d2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8369ffffffffffffffffffff168169ffffffffffffffffffff1610806110bf575081155b156110f6576040517fb1cf675500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6001546000908083101561113c576040517f6477ba0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061114782610f7a565b90508084116111565783611158565b805b949350505050565b60005460ff1661054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b60005460ff161561054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016111c8565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d091906114fd565b9050838110806112df57508281115b156112ee576000915050610fbd565b5060019392505050565b60208101600e8310611333577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b818110156113665785810183015185820160400152820161134a565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156113b757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146113db57600080fd5b9392505050565b69ffffffffffffffffffff81168114610aca57600080fd5b60006020828403121561140c57600080fd5b81356113db816113e2565b60006020828403121561142957600080fd5b5035919050565b60006020828403121561144257600080fd5b815180151581146113db57600080fd5b600181811c9082168061146657607f821691505b60208210810361149f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080600080600060a086880312156114bd57600080fd5b85516114c8816113e2565b8095505060208601519350604086015192506060860151915060808601516114ef816113e2565b809150509295509295909350565b60006020828403121561150f57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202600082127f80000000000000000000000000000000000000000000000000000000000000008414161561157d5761157d611516565b8181058314821517610fbd57610fbd611516565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826115cf576115cf611591565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561162357611623611516565b500590565b80820180821115610fbd57610fbd611516565b8082028115828204841417610fbd57610fbd611516565b60008261166157611661611591565b50049056fea2646970667358221220fd5cf031149a4de2060ab8022ac439ec8641ecbf73c106b08b470709b1a1ff0364736f6c63430008110033";

type CurveLP4PriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveLP4PriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveLP4PriceFeed__factory extends ContractFactory {
  constructor(...args: CurveLP4PriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CurveLP4PriceFeed";
  }

  override deploy(
    addressProvider: PromiseOrValue<string>,
    _curvePool: PromiseOrValue<string>,
    _priceFeed1: PromiseOrValue<string>,
    _priceFeed2: PromiseOrValue<string>,
    _priceFeed3: PromiseOrValue<string>,
    _priceFeed4: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveLP4PriceFeed> {
    return super.deploy(
      addressProvider,
      _curvePool,
      _priceFeed1,
      _priceFeed2,
      _priceFeed3,
      _priceFeed4,
      _description,
      overrides || {}
    ) as Promise<CurveLP4PriceFeed>;
  }
  override getDeployTransaction(
    addressProvider: PromiseOrValue<string>,
    _curvePool: PromiseOrValue<string>,
    _priceFeed1: PromiseOrValue<string>,
    _priceFeed2: PromiseOrValue<string>,
    _priceFeed3: PromiseOrValue<string>,
    _priceFeed4: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressProvider,
      _curvePool,
      _priceFeed1,
      _priceFeed2,
      _priceFeed3,
      _priceFeed4,
      _description,
      overrides || {}
    );
  }
  override attach(address: string): CurveLP4PriceFeed {
    return super.attach(address) as CurveLP4PriceFeed;
  }
  override connect(signer: Signer): CurveLP4PriceFeed__factory {
    return super.connect(signer) as CurveLP4PriceFeed__factory;
  }
  static readonly contractName: "CurveLP4PriceFeed";

  public readonly contractName: "CurveLP4PriceFeed";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveLP4PriceFeedInterface {
    return new utils.Interface(_abi) as CurveLP4PriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveLP4PriceFeed {
    return new Contract(address, _abi, signerOrProvider) as CurveLP4PriceFeed;
  }
}
