/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface UniswapConnectorCheckerInterface extends utils.Interface {
  functions: {
    "connectorToken0()": FunctionFragment;
    "connectorToken1()": FunctionFragment;
    "connectorToken2()": FunctionFragment;
    "connectorToken3()": FunctionFragment;
    "connectorToken4()": FunctionFragment;
    "connectorToken5()": FunctionFragment;
    "connectorToken6()": FunctionFragment;
    "connectorToken7()": FunctionFragment;
    "connectorToken8()": FunctionFragment;
    "connectorToken9()": FunctionFragment;
    "getConnectors()": FunctionFragment;
    "isConnector(address)": FunctionFragment;
    "numConnectors()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "connectorToken0"
      | "connectorToken1"
      | "connectorToken2"
      | "connectorToken3"
      | "connectorToken4"
      | "connectorToken5"
      | "connectorToken6"
      | "connectorToken7"
      | "connectorToken8"
      | "connectorToken9"
      | "getConnectors"
      | "isConnector"
      | "numConnectors"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "connectorToken0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken5",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken6",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken7",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken9",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConnectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConnector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numConnectors",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "connectorToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken5",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken6",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken7",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken9",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numConnectors",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UniswapConnectorChecker extends BaseContract {
  contractName: "UniswapConnectorChecker";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapConnectorCheckerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    connectorToken0(overrides?: CallOverrides): Promise<[string]>;

    connectorToken1(overrides?: CallOverrides): Promise<[string]>;

    connectorToken2(overrides?: CallOverrides): Promise<[string]>;

    connectorToken3(overrides?: CallOverrides): Promise<[string]>;

    connectorToken4(overrides?: CallOverrides): Promise<[string]>;

    connectorToken5(overrides?: CallOverrides): Promise<[string]>;

    connectorToken6(overrides?: CallOverrides): Promise<[string]>;

    connectorToken7(overrides?: CallOverrides): Promise<[string]>;

    connectorToken8(overrides?: CallOverrides): Promise<[string]>;

    connectorToken9(overrides?: CallOverrides): Promise<[string]>;

    getConnectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { connectors: string[] }>;

    isConnector(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numConnectors(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  connectorToken0(overrides?: CallOverrides): Promise<string>;

  connectorToken1(overrides?: CallOverrides): Promise<string>;

  connectorToken2(overrides?: CallOverrides): Promise<string>;

  connectorToken3(overrides?: CallOverrides): Promise<string>;

  connectorToken4(overrides?: CallOverrides): Promise<string>;

  connectorToken5(overrides?: CallOverrides): Promise<string>;

  connectorToken6(overrides?: CallOverrides): Promise<string>;

  connectorToken7(overrides?: CallOverrides): Promise<string>;

  connectorToken8(overrides?: CallOverrides): Promise<string>;

  connectorToken9(overrides?: CallOverrides): Promise<string>;

  getConnectors(overrides?: CallOverrides): Promise<string[]>;

  isConnector(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numConnectors(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    connectorToken0(overrides?: CallOverrides): Promise<string>;

    connectorToken1(overrides?: CallOverrides): Promise<string>;

    connectorToken2(overrides?: CallOverrides): Promise<string>;

    connectorToken3(overrides?: CallOverrides): Promise<string>;

    connectorToken4(overrides?: CallOverrides): Promise<string>;

    connectorToken5(overrides?: CallOverrides): Promise<string>;

    connectorToken6(overrides?: CallOverrides): Promise<string>;

    connectorToken7(overrides?: CallOverrides): Promise<string>;

    connectorToken8(overrides?: CallOverrides): Promise<string>;

    connectorToken9(overrides?: CallOverrides): Promise<string>;

    getConnectors(overrides?: CallOverrides): Promise<string[]>;

    isConnector(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numConnectors(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    connectorToken0(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken1(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken2(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken3(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken4(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken5(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken6(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken7(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken8(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken9(overrides?: CallOverrides): Promise<BigNumber>;

    getConnectors(overrides?: CallOverrides): Promise<BigNumber>;

    isConnector(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numConnectors(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    connectorToken0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken5(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken6(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken7(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken8(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConnectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isConnector(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numConnectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
