/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type BatchSwapStepStruct = {
  poolId: PromiseOrValue<BytesLike>;
  assetInIndex: PromiseOrValue<BigNumberish>;
  assetOutIndex: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  userData: PromiseOrValue<BytesLike>;
};

export type BatchSwapStepStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  poolId: string;
  assetInIndex: BigNumber;
  assetOutIndex: BigNumber;
  amount: BigNumber;
  userData: string;
};

export type FundManagementStruct = {
  sender: PromiseOrValue<string>;
  fromInternalBalance: PromiseOrValue<boolean>;
  recipient: PromiseOrValue<string>;
  toInternalBalance: PromiseOrValue<boolean>;
};

export type FundManagementStructOutput = [string, boolean, string, boolean] & {
  sender: string;
  fromInternalBalance: boolean;
  recipient: string;
  toInternalBalance: boolean;
};

export type ExitPoolRequestStruct = {
  assets: PromiseOrValue<string>[];
  minAmountsOut: PromiseOrValue<BigNumberish>[];
  userData: PromiseOrValue<BytesLike>;
  toInternalBalance: PromiseOrValue<boolean>;
};

export type ExitPoolRequestStructOutput = [
  string[],
  BigNumber[],
  string,
  boolean
] & {
  assets: string[];
  minAmountsOut: BigNumber[];
  userData: string;
  toInternalBalance: boolean;
};

export type JoinPoolRequestStruct = {
  assets: PromiseOrValue<string>[];
  maxAmountsIn: PromiseOrValue<BigNumberish>[];
  userData: PromiseOrValue<BytesLike>;
  fromInternalBalance: PromiseOrValue<boolean>;
};

export type JoinPoolRequestStructOutput = [
  string[],
  BigNumber[],
  string,
  boolean
] & {
  assets: string[];
  maxAmountsIn: BigNumber[];
  userData: string;
  fromInternalBalance: boolean;
};

export type SingleSwapStruct = {
  poolId: PromiseOrValue<BytesLike>;
  kind: PromiseOrValue<BigNumberish>;
  assetIn: PromiseOrValue<string>;
  assetOut: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  userData: PromiseOrValue<BytesLike>;
};

export type SingleSwapStructOutput = [
  string,
  number,
  string,
  string,
  BigNumber,
  string
] & {
  poolId: string;
  kind: number;
  assetIn: string;
  assetOut: string;
  amount: BigNumber;
  userData: string;
};

export interface IBalancerQueriesInterface extends utils.Interface {
  functions: {
    "queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": FunctionFragment;
    "queryExit(bytes32,address,address,(address[],uint256[],bytes,bool))": FunctionFragment;
    "queryJoin(bytes32,address,address,(address[],uint256[],bytes,bool))": FunctionFragment;
    "querySwap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "queryBatchSwap"
      | "queryExit"
      | "queryJoin"
      | "querySwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "queryBatchSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      BatchSwapStepStruct[],
      PromiseOrValue<string>[],
      FundManagementStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryExit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      ExitPoolRequestStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryJoin",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      JoinPoolRequestStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "querySwap",
    values: [SingleSwapStruct, FundManagementStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "queryBatchSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryExit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "querySwap", data: BytesLike): Result;

  events: {};
}

export interface IBalancerQueries extends BaseContract {
  contractName: "IBalancerQueries";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBalancerQueriesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    queryBatchSwap(
      kind: PromiseOrValue<BigNumberish>,
      swaps: BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      funds: FundManagementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: ExitPoolRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: JoinPoolRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    querySwap(
      singleSwap: SingleSwapStruct,
      funds: FundManagementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  queryBatchSwap(
    kind: PromiseOrValue<BigNumberish>,
    swaps: BatchSwapStepStruct[],
    assets: PromiseOrValue<string>[],
    funds: FundManagementStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryExit(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    request: ExitPoolRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryJoin(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    request: JoinPoolRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  querySwap(
    singleSwap: SingleSwapStruct,
    funds: FundManagementStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    queryBatchSwap(
      kind: PromiseOrValue<BigNumberish>,
      swaps: BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      funds: FundManagementStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: ExitPoolRequestStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { bptIn: BigNumber; amountsOut: BigNumber[] }
    >;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: JoinPoolRequestStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { bptOut: BigNumber; amountsIn: BigNumber[] }
    >;

    querySwap(
      singleSwap: SingleSwapStruct,
      funds: FundManagementStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    queryBatchSwap(
      kind: PromiseOrValue<BigNumberish>,
      swaps: BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      funds: FundManagementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: ExitPoolRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: JoinPoolRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    querySwap(
      singleSwap: SingleSwapStruct,
      funds: FundManagementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    queryBatchSwap(
      kind: PromiseOrValue<BigNumberish>,
      swaps: BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      funds: FundManagementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: ExitPoolRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: JoinPoolRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    querySwap(
      singleSwap: SingleSwapStruct,
      funds: FundManagementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
