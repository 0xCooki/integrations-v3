/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IUniswapV3Adapter {
  export type ExactAllInputParamsStruct = {
    path: PromiseOrValue<BytesLike>;
    deadline: PromiseOrValue<BigNumberish>;
    rateMinRAY: PromiseOrValue<BigNumberish>;
  };

  export type ExactAllInputParamsStructOutput = [
    string,
    BigNumber,
    BigNumber
  ] & { path: string; deadline: BigNumber; rateMinRAY: BigNumber };

  export type ExactAllInputSingleParamsStruct = {
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    fee: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    rateMinRAY: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
  };

  export type ExactAllInputSingleParamsStructOutput = [
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: number;
    deadline: BigNumber;
    rateMinRAY: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };
}

export declare namespace ISwapRouter {
  export type ExactInputParamsStruct = {
    path: PromiseOrValue<BytesLike>;
    recipient: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
    amountIn: PromiseOrValue<BigNumberish>;
    amountOutMinimum: PromiseOrValue<BigNumberish>;
  };

  export type ExactInputParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    path: string;
    recipient: string;
    deadline: BigNumber;
    amountIn: BigNumber;
    amountOutMinimum: BigNumber;
  };

  export type ExactInputSingleParamsStruct = {
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    fee: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
    amountIn: PromiseOrValue<BigNumberish>;
    amountOutMinimum: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
  };

  export type ExactInputSingleParamsStructOutput = [
    string,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: number;
    recipient: string;
    deadline: BigNumber;
    amountIn: BigNumber;
    amountOutMinimum: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };

  export type ExactOutputParamsStruct = {
    path: PromiseOrValue<BytesLike>;
    recipient: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
    amountOut: PromiseOrValue<BigNumberish>;
    amountInMaximum: PromiseOrValue<BigNumberish>;
  };

  export type ExactOutputParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    path: string;
    recipient: string;
    deadline: BigNumber;
    amountOut: BigNumber;
    amountInMaximum: BigNumber;
  };

  export type ExactOutputSingleParamsStruct = {
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    fee: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
    amountOut: PromiseOrValue<BigNumberish>;
    amountInMaximum: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
  };

  export type ExactOutputSingleParamsStructOutput = [
    string,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: number;
    recipient: string;
    deadline: BigNumber;
    amountOut: BigNumber;
    amountInMaximum: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };
}

export interface UniswapV3AdapterInterface extends utils.Interface {
  functions: {
    "_acl()": FunctionFragment;
    "_gearboxAdapterType()": FunctionFragment;
    "_gearboxAdapterVersion()": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "connectorToken0()": FunctionFragment;
    "connectorToken1()": FunctionFragment;
    "connectorToken2()": FunctionFragment;
    "connectorToken3()": FunctionFragment;
    "connectorToken4()": FunctionFragment;
    "connectorToken5()": FunctionFragment;
    "connectorToken6()": FunctionFragment;
    "connectorToken7()": FunctionFragment;
    "connectorToken8()": FunctionFragment;
    "connectorToken9()": FunctionFragment;
    "creditManager()": FunctionFragment;
    "exactAllInput((bytes,uint256,uint256))": FunctionFragment;
    "exactAllInputSingle((address,address,uint24,uint256,uint256,uint160))": FunctionFragment;
    "exactInput((bytes,address,uint256,uint256,uint256))": FunctionFragment;
    "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": FunctionFragment;
    "exactOutput((bytes,address,uint256,uint256,uint256))": FunctionFragment;
    "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": FunctionFragment;
    "getConnectors()": FunctionFragment;
    "isConnector(address)": FunctionFragment;
    "numConnectors()": FunctionFragment;
    "targetContract()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_acl"
      | "_gearboxAdapterType"
      | "_gearboxAdapterVersion"
      | "addressProvider"
      | "connectorToken0"
      | "connectorToken1"
      | "connectorToken2"
      | "connectorToken3"
      | "connectorToken4"
      | "connectorToken5"
      | "connectorToken6"
      | "connectorToken7"
      | "connectorToken8"
      | "connectorToken9"
      | "creditManager"
      | "exactAllInput"
      | "exactAllInputSingle"
      | "exactInput"
      | "exactInputSingle"
      | "exactOutput"
      | "exactOutputSingle"
      | "getConnectors"
      | "isConnector"
      | "numConnectors"
      | "targetContract"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_gearboxAdapterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_gearboxAdapterVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken5",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken6",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken7",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorToken9",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exactAllInput",
    values: [IUniswapV3Adapter.ExactAllInputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactAllInputSingle",
    values: [IUniswapV3Adapter.ExactAllInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [ISwapRouter.ExactInputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingle",
    values: [ISwapRouter.ExactInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput",
    values: [ISwapRouter.ExactOutputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputSingle",
    values: [ISwapRouter.ExactOutputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getConnectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConnector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numConnectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_gearboxAdapterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_gearboxAdapterVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken5",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken6",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken7",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorToken9",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactAllInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactAllInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContract",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UniswapV3Adapter extends BaseContract {
  contractName: "UniswapV3Adapter";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV3AdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _acl(overrides?: CallOverrides): Promise<[string]>;

    _gearboxAdapterType(overrides?: CallOverrides): Promise<[number]>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<[number]>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    connectorToken0(overrides?: CallOverrides): Promise<[string]>;

    connectorToken1(overrides?: CallOverrides): Promise<[string]>;

    connectorToken2(overrides?: CallOverrides): Promise<[string]>;

    connectorToken3(overrides?: CallOverrides): Promise<[string]>;

    connectorToken4(overrides?: CallOverrides): Promise<[string]>;

    connectorToken5(overrides?: CallOverrides): Promise<[string]>;

    connectorToken6(overrides?: CallOverrides): Promise<[string]>;

    connectorToken7(overrides?: CallOverrides): Promise<[string]>;

    connectorToken8(overrides?: CallOverrides): Promise<[string]>;

    connectorToken9(overrides?: CallOverrides): Promise<[string]>;

    creditManager(overrides?: CallOverrides): Promise<[string]>;

    exactAllInput(
      params: IUniswapV3Adapter.ExactAllInputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactAllInputSingle(
      params: IUniswapV3Adapter.ExactAllInputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactInput(
      params: ISwapRouter.ExactInputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactInputSingle(
      params: ISwapRouter.ExactInputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactOutput(
      params: ISwapRouter.ExactOutputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactOutputSingle(
      params: ISwapRouter.ExactOutputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getConnectors(
      overrides?: CallOverrides
    ): Promise<[string[]] & { connectors: string[] }>;

    isConnector(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numConnectors(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetContract(overrides?: CallOverrides): Promise<[string]>;
  };

  _acl(overrides?: CallOverrides): Promise<string>;

  _gearboxAdapterType(overrides?: CallOverrides): Promise<number>;

  _gearboxAdapterVersion(overrides?: CallOverrides): Promise<number>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  connectorToken0(overrides?: CallOverrides): Promise<string>;

  connectorToken1(overrides?: CallOverrides): Promise<string>;

  connectorToken2(overrides?: CallOverrides): Promise<string>;

  connectorToken3(overrides?: CallOverrides): Promise<string>;

  connectorToken4(overrides?: CallOverrides): Promise<string>;

  connectorToken5(overrides?: CallOverrides): Promise<string>;

  connectorToken6(overrides?: CallOverrides): Promise<string>;

  connectorToken7(overrides?: CallOverrides): Promise<string>;

  connectorToken8(overrides?: CallOverrides): Promise<string>;

  connectorToken9(overrides?: CallOverrides): Promise<string>;

  creditManager(overrides?: CallOverrides): Promise<string>;

  exactAllInput(
    params: IUniswapV3Adapter.ExactAllInputParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactAllInputSingle(
    params: IUniswapV3Adapter.ExactAllInputSingleParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactInput(
    params: ISwapRouter.ExactInputParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactInputSingle(
    params: ISwapRouter.ExactInputSingleParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactOutput(
    params: ISwapRouter.ExactOutputParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactOutputSingle(
    params: ISwapRouter.ExactOutputSingleParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getConnectors(overrides?: CallOverrides): Promise<string[]>;

  isConnector(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numConnectors(overrides?: CallOverrides): Promise<BigNumber>;

  targetContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _acl(overrides?: CallOverrides): Promise<string>;

    _gearboxAdapterType(overrides?: CallOverrides): Promise<number>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<number>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    connectorToken0(overrides?: CallOverrides): Promise<string>;

    connectorToken1(overrides?: CallOverrides): Promise<string>;

    connectorToken2(overrides?: CallOverrides): Promise<string>;

    connectorToken3(overrides?: CallOverrides): Promise<string>;

    connectorToken4(overrides?: CallOverrides): Promise<string>;

    connectorToken5(overrides?: CallOverrides): Promise<string>;

    connectorToken6(overrides?: CallOverrides): Promise<string>;

    connectorToken7(overrides?: CallOverrides): Promise<string>;

    connectorToken8(overrides?: CallOverrides): Promise<string>;

    connectorToken9(overrides?: CallOverrides): Promise<string>;

    creditManager(overrides?: CallOverrides): Promise<string>;

    exactAllInput(
      params: IUniswapV3Adapter.ExactAllInputParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exactAllInputSingle(
      params: IUniswapV3Adapter.ExactAllInputSingleParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exactInput(
      params: ISwapRouter.ExactInputParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exactInputSingle(
      params: ISwapRouter.ExactInputSingleParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exactOutput(
      params: ISwapRouter.ExactOutputParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exactOutputSingle(
      params: ISwapRouter.ExactOutputSingleParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getConnectors(overrides?: CallOverrides): Promise<string[]>;

    isConnector(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numConnectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _acl(overrides?: CallOverrides): Promise<BigNumber>;

    _gearboxAdapterType(overrides?: CallOverrides): Promise<BigNumber>;

    _gearboxAdapterVersion(overrides?: CallOverrides): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken0(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken1(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken2(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken3(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken4(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken5(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken6(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken7(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken8(overrides?: CallOverrides): Promise<BigNumber>;

    connectorToken9(overrides?: CallOverrides): Promise<BigNumber>;

    creditManager(overrides?: CallOverrides): Promise<BigNumber>;

    exactAllInput(
      params: IUniswapV3Adapter.ExactAllInputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactAllInputSingle(
      params: IUniswapV3Adapter.ExactAllInputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactInput(
      params: ISwapRouter.ExactInputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactInputSingle(
      params: ISwapRouter.ExactInputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactOutput(
      params: ISwapRouter.ExactOutputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactOutputSingle(
      params: ISwapRouter.ExactOutputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getConnectors(overrides?: CallOverrides): Promise<BigNumber>;

    isConnector(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numConnectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _gearboxAdapterType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _gearboxAdapterVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken5(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken6(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken7(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken8(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorToken9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exactAllInput(
      params: IUniswapV3Adapter.ExactAllInputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactAllInputSingle(
      params: IUniswapV3Adapter.ExactAllInputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactInput(
      params: ISwapRouter.ExactInputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactInputSingle(
      params: ISwapRouter.ExactInputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactOutput(
      params: ISwapRouter.ExactOutputParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactOutputSingle(
      params: ISwapRouter.ExactOutputSingleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getConnectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isConnector(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numConnectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
