/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type BalanceStruct = {
  token: PromiseOrValue<string>;
  balance: PromiseOrValue<BigNumberish>;
};

export type BalanceStructOutput = [string, BigNumber] & {
  token: string;
  balance: BigNumber;
};

export interface LiveEnvTestSuiteInterface extends utils.Interface {
  functions: {
    "ROOT_ADDRESS()": FunctionFragment;
    "acl()": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "creditConfiguratorMocks(uint8)": FunctionFragment;
    "creditConfigurators(uint8)": FunctionFragment;
    "creditFacadeMocks(uint8)": FunctionFragment;
    "creditFacades(uint8)": FunctionFragment;
    "creditManagerMocks(uint8)": FunctionFragment;
    "creditManagers(uint8)": FunctionFragment;
    "degenNFT()": FunctionFragment;
    "getAdapter(uint8,uint8)": FunctionFragment;
    "getAdapters(uint8)": FunctionFragment;
    "getBalances()": FunctionFragment;
    "getMockAdapter(uint8,uint8)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "supportedContracts()": FunctionFragment;
    "tokenTestSuite()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROOT_ADDRESS"
      | "acl"
      | "addressProvider"
      | "creditConfiguratorMocks"
      | "creditConfigurators"
      | "creditFacadeMocks"
      | "creditFacades"
      | "creditManagerMocks"
      | "creditManagers"
      | "degenNFT"
      | "getAdapter"
      | "getAdapters"
      | "getBalances"
      | "getMockAdapter"
      | "priceOracle"
      | "supportedContracts"
      | "tokenTestSuite"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROOT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfiguratorMocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfigurators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacadeMocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacades",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagerMocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "degenNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAdapter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMockAdapter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTestSuite",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ROOT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfiguratorMocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfigurators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacadeMocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagerMocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "degenNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdapter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMockAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTestSuite",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LiveEnvTestSuite extends BaseContract {
  contractName: "LiveEnvTestSuite";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiveEnvTestSuiteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROOT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    acl(overrides?: CallOverrides): Promise<[string]>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    creditConfiguratorMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditConfigurators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditFacadeMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditFacades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditManagerMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditManagers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    degenNFT(overrides?: CallOverrides): Promise<[string]>;

    getAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAdapters(
      underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { adapters: string[] }>;

    getBalances(
      overrides?: CallOverrides
    ): Promise<[BalanceStructOutput[]] & { balances: BalanceStructOutput[] }>;

    getMockAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    supportedContracts(overrides?: CallOverrides): Promise<[string]>;

    tokenTestSuite(overrides?: CallOverrides): Promise<[string]>;
  };

  ROOT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  acl(overrides?: CallOverrides): Promise<string>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  creditConfiguratorMocks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  creditConfigurators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  creditFacadeMocks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  creditFacades(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  creditManagerMocks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  creditManagers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  degenNFT(overrides?: CallOverrides): Promise<string>;

  getAdapter(
    underlying: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAdapters(
    underlying: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBalances(overrides?: CallOverrides): Promise<BalanceStructOutput[]>;

  getMockAdapter(
    underlying: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  supportedContracts(overrides?: CallOverrides): Promise<string>;

  tokenTestSuite(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ROOT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    acl(overrides?: CallOverrides): Promise<string>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    creditConfiguratorMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditConfigurators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditFacadeMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditFacades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditManagerMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditManagers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    degenNFT(overrides?: CallOverrides): Promise<string>;

    getAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAdapters(
      underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBalances(overrides?: CallOverrides): Promise<BalanceStructOutput[]>;

    getMockAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    supportedContracts(overrides?: CallOverrides): Promise<string>;

    tokenTestSuite(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ROOT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    acl(overrides?: CallOverrides): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    creditConfiguratorMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditConfigurators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditFacadeMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditFacades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagerMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    degenNFT(overrides?: CallOverrides): Promise<BigNumber>;

    getAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdapters(
      underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(overrides?: CallOverrides): Promise<BigNumber>;

    getMockAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    supportedContracts(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTestSuite(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ROOT_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditConfiguratorMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditConfigurators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditFacadeMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditFacades(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditManagerMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditManagers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    degenNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdapters(
      underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMockAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportedContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenTestSuite(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
