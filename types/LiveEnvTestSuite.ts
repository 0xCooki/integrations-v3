/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type BalanceStruct = {
  token: PromiseOrValue<string>;
  balance: PromiseOrValue<BigNumberish>;
};

export type BalanceStructOutput = [string, BigNumber] & {
  token: string;
  balance: BigNumber;
};

export interface LiveEnvTestSuiteInterface extends utils.Interface {
  functions: {
    "ROOT_ADDRESS()": FunctionFragment;
    "_creditConfigurators(uint8,uint256)": FunctionFragment;
    "_creditFacades(uint8,uint256)": FunctionFragment;
    "_creditManagers(uint8,uint256)": FunctionFragment;
    "acl()": FunctionFragment;
    "activeCM()": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "blacklistHelper()": FunctionFragment;
    "creditConfiguratorMocks(uint8)": FunctionFragment;
    "creditConfigurators(uint8)": FunctionFragment;
    "creditConfigurators(uint8,uint256)": FunctionFragment;
    "creditFacadeMocks(uint8)": FunctionFragment;
    "creditFacades(uint8,uint256)": FunctionFragment;
    "creditFacades(uint8)": FunctionFragment;
    "creditManagerMocks(uint8)": FunctionFragment;
    "creditManagers(uint8,uint256)": FunctionFragment;
    "creditManagers(uint8)": FunctionFragment;
    "degenNFT()": FunctionFragment;
    "getActiveCM()": FunctionFragment;
    "getAdapter(uint8,uint8,uint256)": FunctionFragment;
    "getAdapter(address,uint8)": FunctionFragment;
    "getAdapter(uint8,uint8)": FunctionFragment;
    "getAdapters(uint8,uint256)": FunctionFragment;
    "getAdapters(uint8)": FunctionFragment;
    "getAdapters(address)": FunctionFragment;
    "getBalances()": FunctionFragment;
    "getMockAdapter(uint8,uint8)": FunctionFragment;
    "getSupportedUnderlyings()": FunctionFragment;
    "pools(uint8)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "supportedContracts()": FunctionFragment;
    "tokenTestSuite()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROOT_ADDRESS"
      | "_creditConfigurators"
      | "_creditFacades"
      | "_creditManagers"
      | "acl"
      | "activeCM"
      | "addressProvider"
      | "blacklistHelper"
      | "creditConfiguratorMocks"
      | "creditConfigurators(uint8)"
      | "creditConfigurators(uint8,uint256)"
      | "creditFacadeMocks"
      | "creditFacades(uint8,uint256)"
      | "creditFacades(uint8)"
      | "creditManagerMocks"
      | "creditManagers(uint8,uint256)"
      | "creditManagers(uint8)"
      | "degenNFT"
      | "getActiveCM"
      | "getAdapter(uint8,uint8,uint256)"
      | "getAdapter(address,uint8)"
      | "getAdapter(uint8,uint8)"
      | "getAdapters(uint8,uint256)"
      | "getAdapters(uint8)"
      | "getAdapters(address)"
      | "getBalances"
      | "getMockAdapter"
      | "getSupportedUnderlyings"
      | "pools"
      | "priceOracle"
      | "supportedContracts"
      | "tokenTestSuite"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROOT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_creditConfigurators",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_creditFacades",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_creditManagers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(functionFragment: "activeCM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfiguratorMocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfigurators(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditConfigurators(uint8,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacadeMocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacades(uint8,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditFacades(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagerMocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagers(uint8,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditManagers(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "degenNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveCM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapter(uint8,uint8,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapter(address,uint8)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapter(uint8,uint8)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapters(uint8,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapters(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdapters(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMockAdapter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedUnderlyings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTestSuite",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ROOT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_creditConfigurators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_creditFacades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_creditManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activeCM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfiguratorMocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfigurators(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditConfigurators(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacadeMocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacades(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditFacades(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagerMocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagers(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditManagers(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "degenNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdapter(uint8,uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdapter(address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdapter(uint8,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdapters(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdapters(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdapters(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMockAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedUnderlyings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTestSuite",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LiveEnvTestSuite extends BaseContract {
  contractName: "LiveEnvTestSuite";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiveEnvTestSuiteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROOT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    _creditConfigurators(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _creditFacades(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _creditManagers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    acl(overrides?: CallOverrides): Promise<[string]>;

    activeCM(overrides?: CallOverrides): Promise<[string]>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    blacklistHelper(overrides?: CallOverrides): Promise<[string]>;

    creditConfiguratorMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "creditConfigurators(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "creditConfigurators(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditFacadeMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "creditFacades(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "creditFacades(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    creditManagerMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "creditManagers(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "creditManagers(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    degenNFT(overrides?: CallOverrides): Promise<[string]>;

    getActiveCM(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        cm: string;
        cf: string;
        cc: string;
        accountAmount: BigNumber;
      }
    >;

    "getAdapter(uint8,uint8,uint256)"(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      cmIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAdapter(address,uint8)"(
      creditManager: PromiseOrValue<string>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAdapter(uint8,uint8)"(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAdapters(uint8,uint256)"(
      underlying: PromiseOrValue<BigNumberish>,
      cmIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { adapters: string[] }>;

    "getAdapters(uint8)"(
      underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { adapters: string[] }>;

    "getAdapters(address)"(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { adapters: string[] }>;

    getBalances(
      overrides?: CallOverrides
    ): Promise<[BalanceStructOutput[]] & { balances: BalanceStructOutput[] }>;

    getMockAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSupportedUnderlyings(overrides?: CallOverrides): Promise<[number[]]>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    supportedContracts(overrides?: CallOverrides): Promise<[string]>;

    tokenTestSuite(overrides?: CallOverrides): Promise<[string]>;
  };

  ROOT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  _creditConfigurators(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _creditFacades(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _creditManagers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  acl(overrides?: CallOverrides): Promise<string>;

  activeCM(overrides?: CallOverrides): Promise<string>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  blacklistHelper(overrides?: CallOverrides): Promise<string>;

  creditConfiguratorMocks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "creditConfigurators(uint8)"(
    t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "creditConfigurators(uint8,uint256)"(
    t: PromiseOrValue<BigNumberish>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  creditFacadeMocks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "creditFacades(uint8,uint256)"(
    t: PromiseOrValue<BigNumberish>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "creditFacades(uint8)"(
    t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  creditManagerMocks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "creditManagers(uint8,uint256)"(
    t: PromiseOrValue<BigNumberish>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "creditManagers(uint8)"(
    t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  degenNFT(overrides?: CallOverrides): Promise<string>;

  getActiveCM(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      cm: string;
      cf: string;
      cc: string;
      accountAmount: BigNumber;
    }
  >;

  "getAdapter(uint8,uint8,uint256)"(
    underlying: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    cmIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAdapter(address,uint8)"(
    creditManager: PromiseOrValue<string>,
    target: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAdapter(uint8,uint8)"(
    underlying: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAdapters(uint8,uint256)"(
    underlying: PromiseOrValue<BigNumberish>,
    cmIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAdapters(uint8)"(
    underlying: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAdapters(address)"(
    creditManager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBalances(overrides?: CallOverrides): Promise<BalanceStructOutput[]>;

  getMockAdapter(
    underlying: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSupportedUnderlyings(overrides?: CallOverrides): Promise<number[]>;

  pools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  supportedContracts(overrides?: CallOverrides): Promise<string>;

  tokenTestSuite(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ROOT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    _creditConfigurators(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _creditFacades(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _creditManagers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    acl(overrides?: CallOverrides): Promise<string>;

    activeCM(overrides?: CallOverrides): Promise<string>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    blacklistHelper(overrides?: CallOverrides): Promise<string>;

    creditConfiguratorMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "creditConfigurators(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "creditConfigurators(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditFacadeMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "creditFacades(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "creditFacades(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creditManagerMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "creditManagers(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "creditManagers(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    degenNFT(overrides?: CallOverrides): Promise<string>;

    getActiveCM(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        cm: string;
        cf: string;
        cc: string;
        accountAmount: BigNumber;
      }
    >;

    "getAdapter(uint8,uint8,uint256)"(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      cmIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAdapter(address,uint8)"(
      creditManager: PromiseOrValue<string>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAdapter(uint8,uint8)"(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAdapters(uint8,uint256)"(
      underlying: PromiseOrValue<BigNumberish>,
      cmIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAdapters(uint8)"(
      underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAdapters(address)"(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBalances(overrides?: CallOverrides): Promise<BalanceStructOutput[]>;

    getMockAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSupportedUnderlyings(overrides?: CallOverrides): Promise<number[]>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    supportedContracts(overrides?: CallOverrides): Promise<string>;

    tokenTestSuite(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ROOT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    _creditConfigurators(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _creditFacades(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _creditManagers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acl(overrides?: CallOverrides): Promise<BigNumber>;

    activeCM(overrides?: CallOverrides): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistHelper(overrides?: CallOverrides): Promise<BigNumber>;

    creditConfiguratorMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditConfigurators(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditConfigurators(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditFacadeMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditFacades(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditFacades(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditManagerMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditManagers(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creditManagers(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    degenNFT(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveCM(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdapter(uint8,uint8,uint256)"(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      cmIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdapter(address,uint8)"(
      creditManager: PromiseOrValue<string>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdapter(uint8,uint8)"(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdapters(uint8,uint256)"(
      underlying: PromiseOrValue<BigNumberish>,
      cmIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdapters(uint8)"(
      underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdapters(address)"(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(overrides?: CallOverrides): Promise<BigNumber>;

    getMockAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedUnderlyings(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    supportedContracts(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTestSuite(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ROOT_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _creditConfigurators(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _creditFacades(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _creditManagers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeCM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklistHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditConfiguratorMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditConfigurators(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditConfigurators(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditFacadeMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditFacades(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditFacades(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditManagerMocks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditManagers(uint8,uint256)"(
      t: PromiseOrValue<BigNumberish>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creditManagers(uint8)"(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    degenNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveCM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdapter(uint8,uint8,uint256)"(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      cmIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdapter(address,uint8)"(
      creditManager: PromiseOrValue<string>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdapter(uint8,uint8)"(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdapters(uint8,uint256)"(
      underlying: PromiseOrValue<BigNumberish>,
      cmIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdapters(uint8)"(
      underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdapters(address)"(
      creditManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMockAdapter(
      underlying: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedUnderlyings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportedContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenTestSuite(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
